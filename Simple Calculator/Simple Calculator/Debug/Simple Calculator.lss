
Simple Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00001988  00001a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000ae  008000ae  00001a6a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ac8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001db2  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b33  00000000  00000000  00003a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e9  00000000  00000000  00004541  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  0000562c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000887  00000000  00000000  0000590c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011c8  00000000  00000000  00006193  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000735b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 00 	jmp	0x122	; 0x122 <__ctors_end>
       4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
       8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
       c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      10:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      14:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      18:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      1c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      20:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      24:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      28:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      2c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      30:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      34:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      38:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      3c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      40:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      44:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      48:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      4c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      50:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      54:	77 02       	muls	r23, r23
      56:	77 02       	muls	r23, r23
      58:	68 02       	muls	r22, r24
      5a:	77 02       	muls	r23, r23
      5c:	68 02       	muls	r22, r24
      5e:	77 02       	muls	r23, r23
      60:	01 03       	mulsu	r16, r17
      62:	01 03       	mulsu	r16, r17
      64:	01 03       	mulsu	r16, r17
      66:	01 03       	mulsu	r16, r17
      68:	01 03       	mulsu	r16, r17
      6a:	01 03       	mulsu	r16, r17
      6c:	01 03       	mulsu	r16, r17
      6e:	01 03       	mulsu	r16, r17
      70:	01 03       	mulsu	r16, r17
      72:	01 03       	mulsu	r16, r17
      74:	68 02       	muls	r22, r24
      76:	68 02       	muls	r22, r24
      78:	68 02       	muls	r22, r24
      7a:	cc 02       	muls	r28, r28
      7c:	68 02       	muls	r22, r24
      7e:	68 02       	muls	r22, r24
      80:	68 02       	muls	r22, r24
      82:	68 02       	muls	r22, r24
      84:	68 02       	muls	r22, r24
      86:	68 02       	muls	r22, r24
      88:	68 02       	muls	r22, r24
      8a:	68 02       	muls	r22, r24
      8c:	68 02       	muls	r22, r24
      8e:	68 02       	muls	r22, r24
      90:	68 02       	muls	r22, r24
      92:	68 02       	muls	r22, r24
      94:	68 02       	muls	r22, r24
      96:	68 02       	muls	r22, r24
      98:	68 02       	muls	r22, r24
      9a:	68 02       	muls	r22, r24
      9c:	68 02       	muls	r22, r24
      9e:	68 02       	muls	r22, r24
      a0:	68 02       	muls	r22, r24
      a2:	68 02       	muls	r22, r24
      a4:	68 02       	muls	r22, r24
      a6:	68 02       	muls	r22, r24
      a8:	68 02       	muls	r22, r24
      aa:	68 02       	muls	r22, r24
      ac:	68 02       	muls	r22, r24
      ae:	68 02       	muls	r22, r24
      b0:	68 02       	muls	r22, r24
      b2:	68 02       	muls	r22, r24
      b4:	68 02       	muls	r22, r24
      b6:	68 02       	muls	r22, r24
      b8:	68 02       	muls	r22, r24
      ba:	68 02       	muls	r22, r24
      bc:	68 02       	muls	r22, r24
      be:	68 02       	muls	r22, r24
      c0:	68 02       	muls	r22, r24
      c2:	68 02       	muls	r22, r24
      c4:	68 02       	muls	r22, r24
      c6:	34 03       	mulsu	r19, r20
      c8:	08 00       	.word	0x0008	; ????
      ca:	00 00       	nop
      cc:	be 92       	st	-X, r11
      ce:	24 49       	sbci	r18, 0x94	; 148
      d0:	12 3e       	cpi	r17, 0xE2	; 226
      d2:	ab aa       	std	Y+51, r10	; 0x33
      d4:	aa 2a       	or	r10, r26
      d6:	be cd       	rjmp	.-1156   	; 0xfffffc54 <__eeprom_end+0xff7efc54>
      d8:	cc cc       	rjmp	.-1640   	; 0xfffffa72 <__eeprom_end+0xff7efa72>
      da:	4c 3e       	cpi	r20, 0xEC	; 236
      dc:	00 00       	nop
      de:	00 80       	ld	r0, Z
      e0:	be ab       	std	Y+54, r27	; 0x36
      e2:	aa aa       	std	Y+50, r10	; 0x32
      e4:	aa 3e       	cpi	r26, 0xEA	; 234
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	00 08       	sbc	r0, r0
      f6:	41 78       	andi	r20, 0x81	; 129
      f8:	d3 bb       	out	0x13, r29	; 19
      fa:	43 87       	std	Z+11, r20	; 0x0b
      fc:	d1 13       	cpse	r29, r17
      fe:	3d 19       	sub	r19, r13
     100:	0e 3c       	cpi	r16, 0xCE	; 206
     102:	c3 bd       	out	0x23, r28	; 35
     104:	42 82       	std	Z+2, r4	; 0x02
     106:	ad 2b       	or	r26, r29
     108:	3e 68       	ori	r19, 0x8E	; 142
     10a:	ec 82       	std	Y+4, r14	; 0x04
     10c:	76 be       	out	0x36, r7	; 54
     10e:	d9 8f       	std	Y+25, r29	; 0x19
     110:	e1 a9       	ldd	r30, Z+49	; 0x31
     112:	3e 4c       	sbci	r19, 0xCE	; 206
     114:	80 ef       	ldi	r24, 0xF0	; 240
     116:	ff be       	out	0x3f, r15	; 63
     118:	01 c4       	rjmp	.+2050   	; 0x91c <LCD_enuInit>
     11a:	ff 7f       	andi	r31, 0xFF	; 255
     11c:	3f 00       	.word	0x003f	; ????
     11e:	00 00       	nop
	...

00000122 <__ctors_end>:
     122:	11 24       	eor	r1, r1
     124:	1f be       	out	0x3f, r1	; 63
     126:	cf e5       	ldi	r28, 0x5F	; 95
     128:	d8 e0       	ldi	r29, 0x08	; 8
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_copy_data>:
     12e:	10 e0       	ldi	r17, 0x00	; 0
     130:	a0 e6       	ldi	r26, 0x60	; 96
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	e8 e8       	ldi	r30, 0x88	; 136
     136:	f9 e1       	ldi	r31, 0x19	; 25
     138:	02 c0       	rjmp	.+4      	; 0x13e <__do_copy_data+0x10>
     13a:	05 90       	lpm	r0, Z+
     13c:	0d 92       	st	X+, r0
     13e:	ae 3a       	cpi	r26, 0xAE	; 174
     140:	b1 07       	cpc	r27, r17
     142:	d9 f7       	brne	.-10     	; 0x13a <__do_copy_data+0xc>

00000144 <__do_clear_bss>:
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	ae ea       	ldi	r26, 0xAE	; 174
     148:	b0 e0       	ldi	r27, 0x00	; 0
     14a:	01 c0       	rjmp	.+2      	; 0x14e <.do_clear_bss_start>

0000014c <.do_clear_bss_loop>:
     14c:	1d 92       	st	X+, r1

0000014e <.do_clear_bss_start>:
     14e:	a8 3c       	cpi	r26, 0xC8	; 200
     150:	b2 07       	cpc	r27, r18
     152:	e1 f7       	brne	.-8      	; 0x14c <.do_clear_bss_loop>
     154:	0e 94 cb 05 	call	0xb96	; 0xb96 <main>
     158:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <_exit>

0000015c <__bad_interrupt>:
     15c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000160 <CALCULATOR_vidGetResultPosition>:
 ******************************************************************************
**/
void CALCULATOR_vidGetResultPosition(s32 Copy_s32Res)
{
	/* check the value of the result */
	if(Copy_s32Res > 0)
     160:	16 16       	cp	r1, r22
     162:	17 06       	cpc	r1, r23
     164:	18 06       	cpc	r1, r24
     166:	19 06       	cpc	r1, r25
     168:	cc f4       	brge	.+50     	; 0x19c <CALCULATOR_vidGetResultPosition+0x3c>
		RES_u8Pos = 16 - floor(log10(Copy_s32Res)+1);				/* log10(num) --> return (number of digit - 1) but in float form */
     16a:	0e 94 97 07 	call	0xf2e	; 0xf2e <__floatsisf>
     16e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <log10>
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	40 e8       	ldi	r20, 0x80	; 128
     178:	5f e3       	ldi	r21, 0x3F	; 63
     17a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__addsf3>
     17e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <floor>
     182:	9b 01       	movw	r18, r22
     184:	ac 01       	movw	r20, r24
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	80 e8       	ldi	r24, 0x80	; 128
     18c:	91 e4       	ldi	r25, 0x41	; 65
     18e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__subsf3>
     192:	0e 94 66 07 	call	0xecc	; 0xecc <__fixunssfsi>
     196:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <RES_u8Pos>
     19a:	08 95       	ret
	else if(Copy_s32Res < 0)
     19c:	99 23       	and	r25, r25
     19e:	34 f5       	brge	.+76     	; 0x1ec <CALCULATOR_vidGetResultPosition+0x8c>
		RES_u8Pos = 16 - (floor(log10(-Copy_s32Res)+1)+1);			/* Don't forget '-' sign */
     1a0:	90 95       	com	r25
     1a2:	80 95       	com	r24
     1a4:	70 95       	com	r23
     1a6:	61 95       	neg	r22
     1a8:	7f 4f       	sbci	r23, 0xFF	; 255
     1aa:	8f 4f       	sbci	r24, 0xFF	; 255
     1ac:	9f 4f       	sbci	r25, 0xFF	; 255
     1ae:	0e 94 97 07 	call	0xf2e	; 0xf2e <__floatsisf>
     1b2:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <log10>
     1b6:	20 e0       	ldi	r18, 0x00	; 0
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	40 e8       	ldi	r20, 0x80	; 128
     1bc:	5f e3       	ldi	r21, 0x3F	; 63
     1be:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__addsf3>
     1c2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <floor>
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	40 e8       	ldi	r20, 0x80	; 128
     1cc:	5f e3       	ldi	r21, 0x3F	; 63
     1ce:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__addsf3>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	80 e8       	ldi	r24, 0x80	; 128
     1dc:	91 e4       	ldi	r25, 0x41	; 65
     1de:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__subsf3>
     1e2:	0e 94 66 07 	call	0xecc	; 0xecc <__fixunssfsi>
     1e6:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <RES_u8Pos>
     1ea:	08 95       	ret
	else
		RES_u8Pos = 15;
     1ec:	8f e0       	ldi	r24, 0x0F	; 15
     1ee:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <RES_u8Pos>
     1f2:	08 95       	ret

000001f4 <CALCULATOR_vidRestart>:
 ******************************************************************************
**/
void CALCULATOR_vidRestart(void)
{
	/* reinitialize the variables */
	CALCULATOR_OP1 = 0;
     1f4:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <CALCULATOR_OP1>
     1f8:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <CALCULATOR_OP1+0x1>
     1fc:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <CALCULATOR_OP1+0x2>
     200:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <CALCULATOR_OP1+0x3>
	CALCULATOR_OP2 = 0;
     204:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <CALCULATOR_OP2>
     208:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <CALCULATOR_OP2+0x1>
     20c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <CALCULATOR_OP2+0x2>
     210:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <CALCULATOR_OP2+0x3>
	CALCULATOR_OP = 0;
     214:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <CALCULATOR_OP>
     218:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <CALCULATOR_OP+0x1>
     21c:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <CALCULATOR_OP+0x2>
     220:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <CALCULATOR_OP+0x3>
	CALCULATOR_OPCODE = 0;
     224:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <CALCULATOR_OPCODE>
	CALCULATOR_Help = 0;
     228:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <CALCULATOR_Help>
     22c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <CALCULATOR_Help+0x1>
     230:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <CALCULATOR_Help+0x2>
     234:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <CALCULATOR_Help+0x3>
	
	while(CALCULATOR_KEYPAD_CHARACTER != CALCULATOR_ON)
     238:	2c c0       	rjmp	.+88     	; 0x292 <CALCULATOR_vidRestart+0x9e>
	{
		CALCULATOR_KEYPAD_CHARACTER = KEYPAD_u8GetPressedKey();
     23a:	0e 94 aa 03 	call	0x754	; 0x754 <KEYPAD_u8GetPressedKey>
     23e:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <CALCULATOR_KEYPAD_CHARACTER>
		
		/* this in case of we need to complete more operations on it */
		if(CALCULATOR_KEYPAD_CHARACTER == '+' ||
     242:	8b 32       	cpi	r24, 0x2B	; 43
     244:	31 f0       	breq	.+12     	; 0x252 <CALCULATOR_vidRestart+0x5e>
     246:	8d 32       	cpi	r24, 0x2D	; 45
     248:	21 f0       	breq	.+8      	; 0x252 <CALCULATOR_vidRestart+0x5e>
			CALCULATOR_KEYPAD_CHARACTER == '-' ||
     24a:	8a 32       	cpi	r24, 0x2A	; 42
     24c:	11 f0       	breq	.+4      	; 0x252 <CALCULATOR_vidRestart+0x5e>
			CALCULATOR_KEYPAD_CHARACTER == '*' ||
     24e:	8f 32       	cpi	r24, 0x2F	; 47
     250:	01 f5       	brne	.+64     	; 0x292 <CALCULATOR_vidRestart+0x9e>
			CALCULATOR_KEYPAD_CHARACTER =='/')
		{
			CALCULATOR_OP1 = CALCULATOR_RES;							/* last result is the 1st operand */
     252:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <CALCULATOR_RES>
     256:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <CALCULATOR_RES+0x1>
     25a:	a0 91 b7 00 	lds	r26, 0x00B7	; 0x8000b7 <CALCULATOR_RES+0x2>
     25e:	b0 91 b8 00 	lds	r27, 0x00B8	; 0x8000b8 <CALCULATOR_RES+0x3>
     262:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <CALCULATOR_OP1>
     266:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <CALCULATOR_OP1+0x1>
     26a:	a0 93 c4 00 	sts	0x00C4, r26	; 0x8000c4 <CALCULATOR_OP1+0x2>
     26e:	b0 93 c5 00 	sts	0x00C5, r27	; 0x8000c5 <CALCULATOR_OP1+0x3>
			LCD_vidClearScreen();										/* clear the screen */
     272:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_vidClearScreen>
			LCD_enuWriteNumber(CALCULATOR_OP1);							/* display op1 on lcd */
     276:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <CALCULATOR_OP1>
     27a:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <CALCULATOR_OP1+0x1>
     27e:	0e 94 94 05 	call	0xb28	; 0xb28 <LCD_enuWriteNumber>
			CALCULATOR_OPCODE = CALCULATOR_KEYPAD_CHARACTER;			/* save value of opcode */
     282:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <CALCULATOR_KEYPAD_CHARACTER>
     286:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <CALCULATOR_OPCODE>
			LCD_enuDisplayChar(CALCULATOR_KEYPAD_CHARACTER);			/* display opcode on lcd */
     28a:	0e 94 65 05 	call	0xaca	; 0xaca <LCD_enuDisplayChar>
			CALCULATOR_vidGetOP_OPCODE();								/* get the value of the 2nd operand */
     28e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <CALCULATOR_vidGetOP_OPCODE>
	CALCULATOR_OP2 = 0;
	CALCULATOR_OP = 0;
	CALCULATOR_OPCODE = 0;
	CALCULATOR_Help = 0;
	
	while(CALCULATOR_KEYPAD_CHARACTER != CALCULATOR_ON)
     292:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <CALCULATOR_KEYPAD_CHARACTER>
     296:	83 36       	cpi	r24, 0x63	; 99
     298:	81 f6       	brne	.-96     	; 0x23a <CALCULATOR_vidRestart+0x46>
			CALCULATOR_OPCODE = CALCULATOR_KEYPAD_CHARACTER;			/* save value of opcode */
			LCD_enuDisplayChar(CALCULATOR_KEYPAD_CHARACTER);			/* display opcode on lcd */
			CALCULATOR_vidGetOP_OPCODE();								/* get the value of the 2nd operand */
		}
	}
	LCD_vidClearScreen();
     29a:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_vidClearScreen>
	CALCULATOR_RES = 0;
     29e:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <CALCULATOR_RES>
     2a2:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <CALCULATOR_RES+0x1>
     2a6:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <CALCULATOR_RES+0x2>
     2aa:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <CALCULATOR_RES+0x3>
     2ae:	08 95       	ret

000002b0 <CALCULATOR_vidCalcResult>:
 * @retval		: none
 * @note		: none
 ******************************************************************************
**/
void CALCULATOR_vidCalcResult(void)
{
     2b0:	8f 92       	push	r8
     2b2:	9f 92       	push	r9
     2b4:	af 92       	push	r10
     2b6:	bf 92       	push	r11
     2b8:	cf 92       	push	r12
     2ba:	df 92       	push	r13
     2bc:	ef 92       	push	r14
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
	/* switch on the opcode */
	switch(CALCULATOR_OPCODE)
     2c8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <CALCULATOR_OPCODE>
     2cc:	8b 32       	cpi	r24, 0x2B	; 43
     2ce:	59 f0       	breq	.+22     	; 0x2e6 <CALCULATOR_vidCalcResult+0x36>
     2d0:	20 f4       	brcc	.+8      	; 0x2da <CALCULATOR_vidCalcResult+0x2a>
     2d2:	8a 32       	cpi	r24, 0x2A	; 42
     2d4:	09 f4       	brne	.+2      	; 0x2d8 <CALCULATOR_vidCalcResult+0x28>
     2d6:	61 c0       	rjmp	.+194    	; 0x39a <CALCULATOR_vidCalcResult+0xea>
     2d8:	ee c0       	rjmp	.+476    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     2da:	8d 32       	cpi	r24, 0x2D	; 45
     2dc:	91 f1       	breq	.+100    	; 0x342 <CALCULATOR_vidCalcResult+0x92>
     2de:	8f 32       	cpi	r24, 0x2F	; 47
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <CALCULATOR_vidCalcResult+0x34>
     2e2:	83 c0       	rjmp	.+262    	; 0x3ea <CALCULATOR_vidCalcResult+0x13a>
     2e4:	e8 c0       	rjmp	.+464    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
	{
		/* addition */
		case CALCULATOR_ADD:
		CALCULATOR_RES = (CALCULATOR_OP1 + CALCULATOR_OP2);								/* add the two operands */
     2e6:	40 91 c2 00 	lds	r20, 0x00C2	; 0x8000c2 <CALCULATOR_OP1>
     2ea:	50 91 c3 00 	lds	r21, 0x00C3	; 0x8000c3 <CALCULATOR_OP1+0x1>
     2ee:	60 91 c4 00 	lds	r22, 0x00C4	; 0x8000c4 <CALCULATOR_OP1+0x2>
     2f2:	70 91 c5 00 	lds	r23, 0x00C5	; 0x8000c5 <CALCULATOR_OP1+0x3>
     2f6:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <CALCULATOR_OP2>
     2fa:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <CALCULATOR_OP2+0x1>
     2fe:	a0 91 c0 00 	lds	r26, 0x00C0	; 0x8000c0 <CALCULATOR_OP2+0x2>
     302:	b0 91 c1 00 	lds	r27, 0x00C1	; 0x8000c1 <CALCULATOR_OP2+0x3>
     306:	8a 01       	movw	r16, r20
     308:	9b 01       	movw	r18, r22
     30a:	08 0f       	add	r16, r24
     30c:	19 1f       	adc	r17, r25
     30e:	2a 1f       	adc	r18, r26
     310:	3b 1f       	adc	r19, r27
     312:	c9 01       	movw	r24, r18
     314:	b8 01       	movw	r22, r16
     316:	00 93 b5 00 	sts	0x00B5, r16	; 0x8000b5 <CALCULATOR_RES>
     31a:	10 93 b6 00 	sts	0x00B6, r17	; 0x8000b6 <CALCULATOR_RES+0x1>
     31e:	20 93 b7 00 	sts	0x00B7, r18	; 0x8000b7 <CALCULATOR_RES+0x2>
     322:	30 93 b8 00 	sts	0x00B8, r19	; 0x8000b8 <CALCULATOR_RES+0x3>
		CALCULATOR_vidGetResultPosition(CALCULATOR_RES);								/* get the position of the result */
     326:	0e 94 b0 00 	call	0x160	; 0x160 <CALCULATOR_vidGetResultPosition>
		LCD_enuGoToPosition(2,RES_u8Pos);
     32a:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <RES_u8Pos>
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_enuGoToPosition>
		LCD_enuWriteNumber(CALCULATOR_RES);												/* display the result */
     334:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <CALCULATOR_RES>
     338:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <CALCULATOR_RES+0x1>
     33c:	0e 94 94 05 	call	0xb28	; 0xb28 <LCD_enuWriteNumber>
		break;
     340:	ba c0       	rjmp	.+372    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
		
		/* subtraction */
		case CALCULATOR_SUB:
		CALCULATOR_RES = (CALCULATOR_OP1 - CALCULATOR_OP2);								/* subtract the two operands */
     342:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <CALCULATOR_OP1>
     346:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <CALCULATOR_OP1+0x1>
     34a:	a0 91 c4 00 	lds	r26, 0x00C4	; 0x8000c4 <CALCULATOR_OP1+0x2>
     34e:	b0 91 c5 00 	lds	r27, 0x00C5	; 0x8000c5 <CALCULATOR_OP1+0x3>
     352:	c0 90 be 00 	lds	r12, 0x00BE	; 0x8000be <CALCULATOR_OP2>
     356:	d0 90 bf 00 	lds	r13, 0x00BF	; 0x8000bf <CALCULATOR_OP2+0x1>
     35a:	e0 90 c0 00 	lds	r14, 0x00C0	; 0x8000c0 <CALCULATOR_OP2+0x2>
     35e:	f0 90 c1 00 	lds	r15, 0x00C1	; 0x8000c1 <CALCULATOR_OP2+0x3>
     362:	bc 01       	movw	r22, r24
     364:	cd 01       	movw	r24, r26
     366:	6c 19       	sub	r22, r12
     368:	7d 09       	sbc	r23, r13
     36a:	8e 09       	sbc	r24, r14
     36c:	9f 09       	sbc	r25, r15
     36e:	60 93 b5 00 	sts	0x00B5, r22	; 0x8000b5 <CALCULATOR_RES>
     372:	70 93 b6 00 	sts	0x00B6, r23	; 0x8000b6 <CALCULATOR_RES+0x1>
     376:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <CALCULATOR_RES+0x2>
     37a:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <CALCULATOR_RES+0x3>
		CALCULATOR_vidGetResultPosition(CALCULATOR_RES);								/* get the position of the result */
     37e:	0e 94 b0 00 	call	0x160	; 0x160 <CALCULATOR_vidGetResultPosition>
		LCD_enuGoToPosition(2,RES_u8Pos);
     382:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <RES_u8Pos>
     386:	82 e0       	ldi	r24, 0x02	; 2
     388:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_enuGoToPosition>
		LCD_enuWriteNumber(CALCULATOR_RES);												/* display the result */
     38c:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <CALCULATOR_RES>
     390:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <CALCULATOR_RES+0x1>
     394:	0e 94 94 05 	call	0xb28	; 0xb28 <LCD_enuWriteNumber>
		break;
     398:	8e c0       	rjmp	.+284    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
		
		/* Multiplication */
		case CALCULATOR_MULTI:
		CALCULATOR_RES = (CALCULATOR_OP1 * CALCULATOR_OP2);								/* Multiply the two operands */
     39a:	20 91 c2 00 	lds	r18, 0x00C2	; 0x8000c2 <CALCULATOR_OP1>
     39e:	30 91 c3 00 	lds	r19, 0x00C3	; 0x8000c3 <CALCULATOR_OP1+0x1>
     3a2:	40 91 c4 00 	lds	r20, 0x00C4	; 0x8000c4 <CALCULATOR_OP1+0x2>
     3a6:	50 91 c5 00 	lds	r21, 0x00C5	; 0x8000c5 <CALCULATOR_OP1+0x3>
     3aa:	60 91 be 00 	lds	r22, 0x00BE	; 0x8000be <CALCULATOR_OP2>
     3ae:	70 91 bf 00 	lds	r23, 0x00BF	; 0x8000bf <CALCULATOR_OP2+0x1>
     3b2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <CALCULATOR_OP2+0x2>
     3b6:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <CALCULATOR_OP2+0x3>
     3ba:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsi3>
     3be:	60 93 b5 00 	sts	0x00B5, r22	; 0x8000b5 <CALCULATOR_RES>
     3c2:	70 93 b6 00 	sts	0x00B6, r23	; 0x8000b6 <CALCULATOR_RES+0x1>
     3c6:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <CALCULATOR_RES+0x2>
     3ca:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <CALCULATOR_RES+0x3>
		CALCULATOR_vidGetResultPosition(CALCULATOR_RES);								/* get the position of the result */
     3ce:	0e 94 b0 00 	call	0x160	; 0x160 <CALCULATOR_vidGetResultPosition>
		LCD_enuGoToPosition(2,RES_u8Pos);
     3d2:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <RES_u8Pos>
     3d6:	82 e0       	ldi	r24, 0x02	; 2
     3d8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_enuGoToPosition>
		LCD_enuWriteNumber(CALCULATOR_RES);												/* display the result */
     3dc:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <CALCULATOR_RES>
     3e0:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <CALCULATOR_RES+0x1>
     3e4:	0e 94 94 05 	call	0xb28	; 0xb28 <LCD_enuWriteNumber>
		break;
     3e8:	66 c0       	rjmp	.+204    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
		
		/* Divion */
		case CALCULATOR_DIV:
		/* check if op2 = 0 because this is a math error */
		if(CALCULATOR_OP2 == 0)
     3ea:	c0 90 be 00 	lds	r12, 0x00BE	; 0x8000be <CALCULATOR_OP2>
     3ee:	d0 90 bf 00 	lds	r13, 0x00BF	; 0x8000bf <CALCULATOR_OP2+0x1>
     3f2:	e0 90 c0 00 	lds	r14, 0x00C0	; 0x8000c0 <CALCULATOR_OP2+0x2>
     3f6:	f0 90 c1 00 	lds	r15, 0x00C1	; 0x8000c1 <CALCULATOR_OP2+0x3>
     3fa:	c1 14       	cp	r12, r1
     3fc:	d1 04       	cpc	r13, r1
     3fe:	e1 04       	cpc	r14, r1
     400:	f1 04       	cpc	r15, r1
     402:	b9 f4       	brne	.+46     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     404:	87 ea       	ldi	r24, 0xA7	; 167
     406:	91 e6       	ldi	r25, 0x61	; 97
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     40e:	00 00       	nop
		{
			_delay_ms(100);
			LCD_vidClearScreen();
     410:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_vidClearScreen>
			
			LCD_enuWriteString((u8 *)"MATH ERROR!!");
     414:	84 e6       	ldi	r24, 0x64	; 100
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 82 05 	call	0xb04	; 0xb04 <LCD_enuWriteString>
			LCD_enuGoToPosition(2,0);
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_enuGoToPosition>
			LCD_enuWriteString((u8 *)"Second operand 0");
     424:	81 e7       	ldi	r24, 0x71	; 113
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 82 05 	call	0xb04	; 0xb04 <LCD_enuWriteString>
			
			CALCULATOR_vidRestart();
     42c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <CALCULATOR_vidRestart>
     430:	42 c0       	rjmp	.+132    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
		}
		else
		{
			s32 CALCULATOR_RES_MUL100 = 0;
			u8 CALCULATOR_RES_FRACTION = 0;
			CALCULATOR_RES = (CALCULATOR_OP1 / CALCULATOR_OP2);										/* calculate the integer part */
     432:	80 90 c2 00 	lds	r8, 0x00C2	; 0x8000c2 <CALCULATOR_OP1>
     436:	90 90 c3 00 	lds	r9, 0x00C3	; 0x8000c3 <CALCULATOR_OP1+0x1>
     43a:	a0 90 c4 00 	lds	r10, 0x00C4	; 0x8000c4 <CALCULATOR_OP1+0x2>
     43e:	b0 90 c5 00 	lds	r11, 0x00C5	; 0x8000c5 <CALCULATOR_OP1+0x3>
     442:	c5 01       	movw	r24, r10
     444:	b4 01       	movw	r22, r8
     446:	a7 01       	movw	r20, r14
     448:	96 01       	movw	r18, r12
     44a:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divmodsi4>
     44e:	c2 2f       	mov	r28, r18
     450:	03 2f       	mov	r16, r19
     452:	14 2f       	mov	r17, r20
     454:	d5 2f       	mov	r29, r21
     456:	20 93 b5 00 	sts	0x00B5, r18	; 0x8000b5 <CALCULATOR_RES>
     45a:	30 93 b6 00 	sts	0x00B6, r19	; 0x8000b6 <CALCULATOR_RES+0x1>
     45e:	40 93 b7 00 	sts	0x00B7, r20	; 0x8000b7 <CALCULATOR_RES+0x2>
     462:	50 93 b8 00 	sts	0x00B8, r21	; 0x8000b8 <CALCULATOR_RES+0x3>
			CALCULATOR_RES_MUL100 = ((CALCULATOR_OP1 * 100) / CALCULATOR_OP2);						/* calculate the result multiply by 100 */
     466:	a4 e6       	ldi	r26, 0x64	; 100
     468:	b0 e0       	ldi	r27, 0x00	; 0
     46a:	a5 01       	movw	r20, r10
     46c:	94 01       	movw	r18, r8
     46e:	0e 94 9c 09 	call	0x1338	; 0x1338 <__muluhisi3>
     472:	a7 01       	movw	r20, r14
     474:	96 01       	movw	r18, r12
     476:	0e 94 77 09 	call	0x12ee	; 0x12ee <__divmodsi4>
			CALCULATOR_RES_FRACTION = CALCULATOR_RES_MUL100 - (CALCULATOR_RES * 100);				/* calculate the fraction part */
     47a:	f2 2e       	mov	r15, r18
     47c:	94 e6       	ldi	r25, 0x64	; 100
     47e:	c9 9f       	mul	r28, r25
     480:	f0 18       	sub	r15, r0
     482:	11 24       	eor	r1, r1
			CALCULATOR_vidGetResultPosition(CALCULATOR_RES);
     484:	6c 2f       	mov	r22, r28
     486:	70 2f       	mov	r23, r16
     488:	81 2f       	mov	r24, r17
     48a:	9d 2f       	mov	r25, r29
     48c:	0e 94 b0 00 	call	0x160	; 0x160 <CALCULATOR_vidGetResultPosition>
			LCD_enuGoToPosition(2,RES_u8Pos-3);														/* get the position of the result */
     490:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <RES_u8Pos>
     494:	63 50       	subi	r22, 0x03	; 3
     496:	82 e0       	ldi	r24, 0x02	; 2
     498:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_enuGoToPosition>
			LCD_enuWriteNumber(CALCULATOR_RES);														/* display the integer part */
     49c:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <CALCULATOR_RES>
     4a0:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <CALCULATOR_RES+0x1>
     4a4:	0e 94 94 05 	call	0xb28	; 0xb28 <LCD_enuWriteNumber>
			LCD_enuDisplayChar('.');																/* display '.' */
     4a8:	8e e2       	ldi	r24, 0x2E	; 46
     4aa:	0e 94 65 05 	call	0xaca	; 0xaca <LCD_enuDisplayChar>
			LCD_enuWriteNumber(CALCULATOR_RES_FRACTION);											/* display the fraction part */
     4ae:	8f 2d       	mov	r24, r15
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 94 05 	call	0xb28	; 0xb28 <LCD_enuWriteNumber>
		}
		break;
	}
	
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	bf 90       	pop	r11
     4c8:	af 90       	pop	r10
     4ca:	9f 90       	pop	r9
     4cc:	8f 90       	pop	r8
     4ce:	08 95       	ret

000004d0 <CALCULATOR_vidGetOP_OPCODE>:
void CALCULATOR_vidGetOP_OPCODE(void)
{
	/* Loop until the user enter '=' */
	while(1)
	{
		CALCULATOR_KEYPAD_CHARACTER = KEYPAD_u8GetPressedKey();
     4d0:	0e 94 aa 03 	call	0x754	; 0x754 <KEYPAD_u8GetPressedKey>
     4d4:	c8 2f       	mov	r28, r24
     4d6:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <CALCULATOR_KEYPAD_CHARACTER>
		
		switch(CALCULATOR_KEYPAD_CHARACTER)
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	fc 01       	movw	r30, r24
     4de:	ba 97       	sbiw	r30, 0x2a	; 42
     4e0:	ea 33       	cpi	r30, 0x3A	; 58
     4e2:	f1 05       	cpc	r31, r1
     4e4:	a8 f7       	brcc	.-22     	; 0x4d0 <CALCULATOR_vidGetOP_OPCODE>
     4e6:	e6 5d       	subi	r30, 0xD6	; 214
     4e8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ea:	0c 94 96 09 	jmp	0x132c	; 0x132c <__tablejump2__>
			/* opcode case */
			case CALCULATOR_ADD:
			case CALCULATOR_SUB:
			case CALCULATOR_MULTI:
			case CALCULATOR_DIV:
			if(CALCULATOR_KEYPAD_CHARACTER == '-' && !Number_Is_Neg && !CALCULATOR_OP)	/* check if the user enter negative sign */
     4ee:	8d 32       	cpi	r24, 0x2D	; 45
     4f0:	b9 f4       	brne	.+46     	; 0x520 <CALCULATOR_vidGetOP_OPCODE+0x50>
     4f2:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
     4f6:	81 11       	cpse	r24, r1
     4f8:	13 c0       	rjmp	.+38     	; 0x520 <CALCULATOR_vidGetOP_OPCODE+0x50>
     4fa:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <CALCULATOR_OP>
     4fe:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <CALCULATOR_OP+0x1>
     502:	a0 91 bc 00 	lds	r26, 0x00BC	; 0x8000bc <CALCULATOR_OP+0x2>
     506:	b0 91 bd 00 	lds	r27, 0x00BD	; 0x8000bd <CALCULATOR_OP+0x3>
     50a:	89 2b       	or	r24, r25
     50c:	8a 2b       	or	r24, r26
     50e:	8b 2b       	or	r24, r27
     510:	39 f4       	brne	.+14     	; 0x520 <CALCULATOR_vidGetOP_OPCODE+0x50>
			{
				LCD_enuDisplayChar(CALCULATOR_KEYPAD_CHARACTER);
     512:	8c 2f       	mov	r24, r28
     514:	0e 94 65 05 	call	0xaca	; 0xaca <LCD_enuDisplayChar>
				Number_Is_Neg = 1;										/* rise the flag to know that the number is has a '-' before it */
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__data_end>
     51e:	d8 cf       	rjmp	.-80     	; 0x4d0 <CALCULATOR_vidGetOP_OPCODE>
			}
			else
			{	
				CALCULATOR_OPCODE = CALCULATOR_KEYPAD_CHARACTER;		/* save value of opcode */
     520:	c0 93 b9 00 	sts	0x00B9, r28	; 0x8000b9 <CALCULATOR_OPCODE>
				CALCULATOR_OP1 = CALCULATOR_OP;							/* save value of op1 */
     524:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <CALCULATOR_OP>
     528:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <CALCULATOR_OP+0x1>
     52c:	a0 91 bc 00 	lds	r26, 0x00BC	; 0x8000bc <CALCULATOR_OP+0x2>
     530:	b0 91 bd 00 	lds	r27, 0x00BD	; 0x8000bd <CALCULATOR_OP+0x3>
     534:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <CALCULATOR_OP1>
     538:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <CALCULATOR_OP1+0x1>
     53c:	a0 93 c4 00 	sts	0x00C4, r26	; 0x8000c4 <CALCULATOR_OP1+0x2>
     540:	b0 93 c5 00 	sts	0x00C5, r27	; 0x8000c5 <CALCULATOR_OP1+0x3>
				CALCULATOR_OP = 0;										/* zero of op to use it to calculate op2 */
     544:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <CALCULATOR_OP>
     548:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <CALCULATOR_OP+0x1>
     54c:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <CALCULATOR_OP+0x2>
     550:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <CALCULATOR_OP+0x3>
				LCD_enuDisplayChar(CALCULATOR_KEYPAD_CHARACTER);		/* display the opcode on lcd */
     554:	8c 2f       	mov	r24, r28
     556:	0e 94 65 05 	call	0xaca	; 0xaca <LCD_enuDisplayChar>
				
				if(Number_Is_Neg)										/* check the flag */
     55a:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
     55e:	88 23       	and	r24, r24
     560:	09 f4       	brne	.+2      	; 0x564 <CALCULATOR_vidGetOP_OPCODE+0x94>
     562:	b6 cf       	rjmp	.-148    	; 0x4d0 <CALCULATOR_vidGetOP_OPCODE>
				{
					CALCULATOR_OP1 *= -1;								/* Multiply op1 by -1 because the flag is 1 */
     564:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <CALCULATOR_OP1>
     568:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <CALCULATOR_OP1+0x1>
     56c:	a0 91 c4 00 	lds	r26, 0x00C4	; 0x8000c4 <CALCULATOR_OP1+0x2>
     570:	b0 91 c5 00 	lds	r27, 0x00C5	; 0x8000c5 <CALCULATOR_OP1+0x3>
     574:	b0 95       	com	r27
     576:	a0 95       	com	r26
     578:	90 95       	com	r25
     57a:	81 95       	neg	r24
     57c:	9f 4f       	sbci	r25, 0xFF	; 255
     57e:	af 4f       	sbci	r26, 0xFF	; 255
     580:	bf 4f       	sbci	r27, 0xFF	; 255
     582:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <CALCULATOR_OP1>
     586:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <CALCULATOR_OP1+0x1>
     58a:	a0 93 c4 00 	sts	0x00C4, r26	; 0x8000c4 <CALCULATOR_OP1+0x2>
     58e:	b0 93 c5 00 	sts	0x00C5, r27	; 0x8000c5 <CALCULATOR_OP1+0x3>
					Number_Is_Neg = 0;									/* Down the flag */
     592:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__data_end>
     596:	9c cf       	rjmp	.-200    	; 0x4d0 <CALCULATOR_vidGetOP_OPCODE>
			}
			break;
			
			/* equal case */
			case CALCULATOR_EQUAL:
			CALCULATOR_OP2 = CALCULATOR_OP;							/* save value of op2 */
     598:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <CALCULATOR_OP>
     59c:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <CALCULATOR_OP+0x1>
     5a0:	a0 91 bc 00 	lds	r26, 0x00BC	; 0x8000bc <CALCULATOR_OP+0x2>
     5a4:	b0 91 bd 00 	lds	r27, 0x00BD	; 0x8000bd <CALCULATOR_OP+0x3>
     5a8:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <CALCULATOR_OP2>
     5ac:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <CALCULATOR_OP2+0x1>
     5b0:	a0 93 c0 00 	sts	0x00C0, r26	; 0x8000c0 <CALCULATOR_OP2+0x2>
     5b4:	b0 93 c1 00 	sts	0x00C1, r27	; 0x8000c1 <CALCULATOR_OP2+0x3>
			LCD_enuDisplayChar(CALCULATOR_KEYPAD_CHARACTER);		/* display '=' on lcd */
     5b8:	8c 2f       	mov	r24, r28
     5ba:	0e 94 65 05 	call	0xaca	; 0xaca <LCD_enuDisplayChar>
			if(Number_Is_Neg)										/* check the flag */
     5be:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
     5c2:	88 23       	and	r24, r24
     5c4:	c9 f0       	breq	.+50     	; 0x5f8 <CALCULATOR_vidGetOP_OPCODE+0x128>
			{
				CALCULATOR_OP2 *= -1;								/* Multiply op2 by -1 because the flag is 1 */
     5c6:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <CALCULATOR_OP2>
     5ca:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <CALCULATOR_OP2+0x1>
     5ce:	a0 91 c0 00 	lds	r26, 0x00C0	; 0x8000c0 <CALCULATOR_OP2+0x2>
     5d2:	b0 91 c1 00 	lds	r27, 0x00C1	; 0x8000c1 <CALCULATOR_OP2+0x3>
     5d6:	b0 95       	com	r27
     5d8:	a0 95       	com	r26
     5da:	90 95       	com	r25
     5dc:	81 95       	neg	r24
     5de:	9f 4f       	sbci	r25, 0xFF	; 255
     5e0:	af 4f       	sbci	r26, 0xFF	; 255
     5e2:	bf 4f       	sbci	r27, 0xFF	; 255
     5e4:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <CALCULATOR_OP2>
     5e8:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <CALCULATOR_OP2+0x1>
     5ec:	a0 93 c0 00 	sts	0x00C0, r26	; 0x8000c0 <CALCULATOR_OP2+0x2>
     5f0:	b0 93 c1 00 	sts	0x00C1, r27	; 0x8000c1 <CALCULATOR_OP2+0x3>
				Number_Is_Neg = 0;									/* Down the flag */
     5f4:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__data_end>
			}
			CALCULATOR_vidCalcResult();								/* calculate the result */
     5f8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <CALCULATOR_vidCalcResult>
			CALCULATOR_vidRestart();								/* restart calculator when user press ON/C */
     5fc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <CALCULATOR_vidRestart>
			break;
     600:	67 cf       	rjmp	.-306    	; 0x4d0 <CALCULATOR_vidGetOP_OPCODE>
			case NUMBER_5:
			case NUMBER_6:
			case NUMBER_7:
			case NUMBER_8:
			case NUMBER_9:
			CALCULATOR_Help = CALCULATOR_KEYPAD_CHARACTER - NUMBER_0;						/* get the integer value of character */
     602:	c8 2e       	mov	r12, r24
     604:	d1 2c       	mov	r13, r1
     606:	80 e3       	ldi	r24, 0x30	; 48
     608:	c8 1a       	sub	r12, r24
     60a:	d1 08       	sbc	r13, r1
     60c:	0d 2c       	mov	r0, r13
     60e:	00 0c       	add	r0, r0
     610:	ee 08       	sbc	r14, r14
     612:	ff 08       	sbc	r15, r15
     614:	c0 92 b0 00 	sts	0x00B0, r12	; 0x8000b0 <CALCULATOR_Help>
     618:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <CALCULATOR_Help+0x1>
     61c:	e0 92 b2 00 	sts	0x00B2, r14	; 0x8000b2 <CALCULATOR_Help+0x2>
     620:	f0 92 b3 00 	sts	0x00B3, r15	; 0x8000b3 <CALCULATOR_Help+0x3>
			CALCULATOR_OP = (CALCULATOR_OP * CALCULATOR_BASE) + CALCULATOR_Help;			/* calculate the value if number if its more than one digit */
     624:	20 91 ba 00 	lds	r18, 0x00BA	; 0x8000ba <CALCULATOR_OP>
     628:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <CALCULATOR_OP+0x1>
     62c:	40 91 bc 00 	lds	r20, 0x00BC	; 0x8000bc <CALCULATOR_OP+0x2>
     630:	50 91 bd 00 	lds	r21, 0x00BD	; 0x8000bd <CALCULATOR_OP+0x3>
     634:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     638:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     63c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     640:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     644:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsi3>
     648:	c6 0e       	add	r12, r22
     64a:	d7 1e       	adc	r13, r23
     64c:	e8 1e       	adc	r14, r24
     64e:	f9 1e       	adc	r15, r25
     650:	c0 92 ba 00 	sts	0x00BA, r12	; 0x8000ba <CALCULATOR_OP>
     654:	d0 92 bb 00 	sts	0x00BB, r13	; 0x8000bb <CALCULATOR_OP+0x1>
     658:	e0 92 bc 00 	sts	0x00BC, r14	; 0x8000bc <CALCULATOR_OP+0x2>
     65c:	f0 92 bd 00 	sts	0x00BD, r15	; 0x8000bd <CALCULATOR_OP+0x3>
			LCD_enuDisplayChar(CALCULATOR_KEYPAD_CHARACTER);								/* display digit on lcd */
     660:	8c 2f       	mov	r24, r28
     662:	0e 94 65 05 	call	0xaca	; 0xaca <LCD_enuDisplayChar>
			break;
     666:	34 cf       	rjmp	.-408    	; 0x4d0 <CALCULATOR_vidGetOP_OPCODE>
			
			/* this used in case of the use need to clear lcd when it enters a wrong number */
			case CALCULATOR_ON:
			CALCULATOR_vidRestart();
     668:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <CALCULATOR_vidRestart>
			break;
     66c:	31 cf       	rjmp	.-414    	; 0x4d0 <CALCULATOR_vidGetOP_OPCODE>

0000066e <CALCULATOR_vidRun>:
 ******************************************************************************
**/
void CALCULATOR_vidRun(void)
{
	/* Turn on Keypad */
	KEYPAD_enuInit();
     66e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <KEYPAD_enuInit>
	
	/* Loop until user press on ON/C button to turn on the Calculator */
	while(CALCULATOR_u8OnOff != CALCULATOR_ON)
     672:	04 c0       	rjmp	.+8      	; 0x67c <CALCULATOR_vidRun+0xe>
	{
		CALCULATOR_u8OnOff = KEYPAD_u8GetPressedKey();
     674:	0e 94 aa 03 	call	0x754	; 0x754 <KEYPAD_u8GetPressedKey>
     678:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <CALCULATOR_u8OnOff>
{
	/* Turn on Keypad */
	KEYPAD_enuInit();
	
	/* Loop until user press on ON/C button to turn on the Calculator */
	while(CALCULATOR_u8OnOff != CALCULATOR_ON)
     67c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <CALCULATOR_u8OnOff>
     680:	83 36       	cpi	r24, 0x63	; 99
     682:	c1 f7       	brne	.-16     	; 0x674 <CALCULATOR_vidRun+0x6>
	{
		CALCULATOR_u8OnOff = KEYPAD_u8GetPressedKey();
	}
	
	/* Turn on the Calculator */
	LCD_enuInit();
     684:	0e 94 8e 04 	call	0x91c	; 0x91c <LCD_enuInit>
	LCD_enuGoToPosition(1,4);
     688:	64 e0       	ldi	r22, 0x04	; 4
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_enuGoToPosition>
	LCD_enuWriteString((u8 *)"Welcome");
     690:	82 e8       	ldi	r24, 0x82	; 130
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 82 05 	call	0xb04	; 0xb04 <LCD_enuWriteString>
     698:	2f e3       	ldi	r18, 0x3F	; 63
     69a:	8d e0       	ldi	r24, 0x0D	; 13
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	21 50       	subi	r18, 0x01	; 1
     6a0:	80 40       	sbci	r24, 0x00	; 0
     6a2:	90 40       	sbci	r25, 0x00	; 0
     6a4:	e1 f7       	brne	.-8      	; 0x69e <CALCULATOR_vidRun+0x30>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <CALCULATOR_vidRun+0x3a>
     6a8:	00 00       	nop
	_delay_ms(1000);
	LCD_vidClearScreen();
     6aa:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_vidClearScreen>

	/* Get the operands and opcode of the calculator */	
	CALCULATOR_vidGetOP_OPCODE();
     6ae:	0e 94 68 02 	call	0x4d0	; 0x4d0 <CALCULATOR_vidGetOP_OPCODE>

000006b2 <KEYPAD_enuInit>:
{
	ES_t Local_u8ErrorState = ES_NOK;
	
	/* Configure Column pins as output high */
	/* Output */
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_C1_PORT, KEYPAD_C1_PIN, DIO_u8OUTPUT);
     6b2:	41 e0       	ldi	r20, 0x01	; 1
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_C2_PORT, KEYPAD_C2_PIN, DIO_u8OUTPUT);
     6bc:	41 e0       	ldi	r20, 0x01	; 1
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_C3_PORT, KEYPAD_C3_PIN, DIO_u8OUTPUT);
     6c6:	41 e0       	ldi	r20, 0x01	; 1
     6c8:	62 e0       	ldi	r22, 0x02	; 2
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_C4_PORT, KEYPAD_C4_PIN, DIO_u8OUTPUT);
     6d0:	41 e0       	ldi	r20, 0x01	; 1
     6d2:	63 e0       	ldi	r22, 0x03	; 3
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
	
	/* High */
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_C1_PORT, KEYPAD_C1_PIN, DIO_u8HIGH);
     6da:	41 e0       	ldi	r20, 0x01	; 1
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_C2_PORT, KEYPAD_C2_PIN, DIO_u8HIGH);
     6e4:	41 e0       	ldi	r20, 0x01	; 1
     6e6:	61 e0       	ldi	r22, 0x01	; 1
     6e8:	82 e0       	ldi	r24, 0x02	; 2
     6ea:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_C3_PORT, KEYPAD_C3_PIN, DIO_u8HIGH);
     6ee:	41 e0       	ldi	r20, 0x01	; 1
     6f0:	62 e0       	ldi	r22, 0x02	; 2
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_C4_PORT, KEYPAD_C4_PIN, DIO_u8HIGH);
     6f8:	41 e0       	ldi	r20, 0x01	; 1
     6fa:	63 e0       	ldi	r22, 0x03	; 3
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
	
	/* Configure Row pins as input pull-up */
	/* Input */
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_R1_PORT, KEYPAD_R1_PIN, DIO_u8INPUT);
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	64 e0       	ldi	r22, 0x04	; 4
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_R2_PORT, KEYPAD_R2_PIN, DIO_u8INPUT);
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	65 e0       	ldi	r22, 0x05	; 5
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_R3_PORT, KEYPAD_R3_PIN, DIO_u8INPUT);
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	66 e0       	ldi	r22, 0x06	; 6
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
	Local_u8ErrorState = DIO_enuSetPinDirection(KEYPAD_R4_PORT, KEYPAD_R4_PIN, DIO_u8INPUT);
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	67 e0       	ldi	r22, 0x07	; 7
     724:	82 e0       	ldi	r24, 0x02	; 2
     726:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
	
	/* Pull-UP */
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_R1_PORT, KEYPAD_R1_PIN, DIO_u8PULL_UP);
     72a:	41 e0       	ldi	r20, 0x01	; 1
     72c:	64 e0       	ldi	r22, 0x04	; 4
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_R2_PORT, KEYPAD_R2_PIN, DIO_u8PULL_UP);
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	65 e0       	ldi	r22, 0x05	; 5
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_R3_PORT, KEYPAD_R3_PIN, DIO_u8PULL_UP);
     73e:	41 e0       	ldi	r20, 0x01	; 1
     740:	66 e0       	ldi	r22, 0x06	; 6
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
	Local_u8ErrorState = DIO_enuSetPinVal(KEYPAD_R4_PORT, KEYPAD_R4_PIN, DIO_u8PULL_UP);
     748:	41 e0       	ldi	r20, 0x01	; 1
     74a:	67 e0       	ldi	r22, 0x07	; 7
     74c:	82 e0       	ldi	r24, 0x02	; 2
     74e:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
	
	return Local_u8ErrorState;
}
     752:	08 95       	ret

00000754 <KEYPAD_u8GetPressedKey>:
 * @retval		: it returns the Key pressed
 * @note		: none
 ******************************************************************************
**/
u8 KEYPAD_u8GetPressedKey(void)
{
     754:	cf 92       	push	r12
     756:	df 92       	push	r13
     758:	ef 92       	push	r14
     75a:	ff 92       	push	r15
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	1f 92       	push	r1
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_KEYPAD_CHAR[ROW_NUM][COLUMN_NUM] = KEYPAD_CHARACTERS;
	
	u8 Local_u8ColumnIndex, Local_u8RowIndex, Local_u8PinState;
	u8 Local_u8PressedKey = KEYPAD_No_Key_Pressed;
	
	for(Local_u8ColumnIndex = 0; Local_u8ColumnIndex < COLUMN_NUM; Local_u8ColumnIndex++)
     76a:	00 e0       	ldi	r16, 0x00	; 0
     76c:	4e c0       	rjmp	.+156    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	{
		/* Active the current column */
		DIO_enuSetPinVal(Local_Au8ColumnsPorts[Local_u8ColumnIndex], Local_Au8ColumnsPins[Local_u8ColumnIndex], DIO_u8LOW);
     76e:	c0 2e       	mov	r12, r16
     770:	d1 2c       	mov	r13, r1
     772:	d6 01       	movw	r26, r12
     774:	aa 55       	subi	r26, 0x5A	; 90
     776:	bf 4f       	sbci	r27, 0xFF	; 255
     778:	f6 01       	movw	r30, r12
     77a:	ee 55       	subi	r30, 0x5E	; 94
     77c:	ff 4f       	sbci	r31, 0xFF	; 255
     77e:	40 e0       	ldi	r20, 0x00	; 0
     780:	6c 91       	ld	r22, X
     782:	80 81       	ld	r24, Z
     784:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
		
		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUM; Local_u8RowIndex++)
     788:	10 e0       	ldi	r17, 0x00	; 0
     78a:	31 c0       	rjmp	.+98     	; 0x7ee <KEYPAD_u8GetPressedKey+0x9a>
		{
			/* iterate on reading Row pins value */
			DIO_enuGetPinVal(Local_Au8RowsPorts[Local_u8RowIndex], Local_Au8RowsPins[Local_u8RowIndex], &Local_u8PinState);
     78c:	e1 2e       	mov	r14, r17
     78e:	f1 2c       	mov	r15, r1
     790:	d7 01       	movw	r26, r14
     792:	a2 56       	subi	r26, 0x62	; 98
     794:	bf 4f       	sbci	r27, 0xFF	; 255
     796:	f7 01       	movw	r30, r14
     798:	e6 56       	subi	r30, 0x66	; 102
     79a:	ff 4f       	sbci	r31, 0xFF	; 255
     79c:	ae 01       	movw	r20, r28
     79e:	4f 5f       	subi	r20, 0xFF	; 255
     7a0:	5f 4f       	sbci	r21, 0xFF	; 255
     7a2:	6c 91       	ld	r22, X
     7a4:	80 81       	ld	r24, Z
     7a6:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enuGetPinVal>
			
			if(DIO_u8LOW == Local_u8PinState)
     7aa:	89 81       	ldd	r24, Y+1	; 0x01
     7ac:	81 11       	cpse	r24, r1
     7ae:	1e c0       	rjmp	.+60     	; 0x7ec <KEYPAD_u8GetPressedKey+0x98>
			{
				Local_u8PressedKey = Local_KEYPAD_CHAR[Local_u8RowIndex][Local_u8ColumnIndex];
     7b0:	c7 01       	movw	r24, r14
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	86 57       	subi	r24, 0x76	; 118
     7bc:	9f 4f       	sbci	r25, 0xFF	; 255
     7be:	fc 01       	movw	r30, r24
     7c0:	ec 0d       	add	r30, r12
     7c2:	fd 1d       	adc	r31, r13
     7c4:	10 81       	ld	r17, Z
				
				/* single press */
				while(DIO_u8LOW == Local_u8PinState)
     7c6:	0d c0       	rjmp	.+26     	; 0x7e2 <KEYPAD_u8GetPressedKey+0x8e>
				{
					DIO_enuGetPinVal(Local_Au8RowsPorts[Local_u8RowIndex], Local_Au8RowsPins[Local_u8RowIndex], &Local_u8PinState);
     7c8:	ae 01       	movw	r20, r28
     7ca:	4f 5f       	subi	r20, 0xFF	; 255
     7cc:	5f 4f       	sbci	r21, 0xFF	; 255
     7ce:	f7 01       	movw	r30, r14
     7d0:	e2 56       	subi	r30, 0x62	; 98
     7d2:	ff 4f       	sbci	r31, 0xFF	; 255
     7d4:	60 81       	ld	r22, Z
     7d6:	f7 01       	movw	r30, r14
     7d8:	e6 56       	subi	r30, 0x66	; 102
     7da:	ff 4f       	sbci	r31, 0xFF	; 255
     7dc:	80 81       	ld	r24, Z
     7de:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enuGetPinVal>
			if(DIO_u8LOW == Local_u8PinState)
			{
				Local_u8PressedKey = Local_KEYPAD_CHAR[Local_u8RowIndex][Local_u8ColumnIndex];
				
				/* single press */
				while(DIO_u8LOW == Local_u8PinState)
     7e2:	99 81       	ldd	r25, Y+1	; 0x01
     7e4:	99 23       	and	r25, r25
     7e6:	81 f3       	breq	.-32     	; 0x7c8 <KEYPAD_u8GetPressedKey+0x74>
				{
					DIO_enuGetPinVal(Local_Au8RowsPorts[Local_u8RowIndex], Local_Au8RowsPins[Local_u8RowIndex], &Local_u8PinState);
				}
				return Local_u8PressedKey;
     7e8:	81 2f       	mov	r24, r17
     7ea:	13 c0       	rjmp	.+38     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
	for(Local_u8ColumnIndex = 0; Local_u8ColumnIndex < COLUMN_NUM; Local_u8ColumnIndex++)
	{
		/* Active the current column */
		DIO_enuSetPinVal(Local_Au8ColumnsPorts[Local_u8ColumnIndex], Local_Au8ColumnsPins[Local_u8ColumnIndex], DIO_u8LOW);
		
		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUM; Local_u8RowIndex++)
     7ec:	1f 5f       	subi	r17, 0xFF	; 255
     7ee:	14 30       	cpi	r17, 0x04	; 4
     7f0:	68 f2       	brcs	.-102    	; 0x78c <KEYPAD_u8GetPressedKey+0x38>
				return Local_u8PressedKey;
			}
		}
		
		/* Deactive the current column */
		DIO_enuSetPinVal(Local_Au8ColumnsPorts[Local_u8ColumnIndex], Local_Au8ColumnsPins[Local_u8ColumnIndex], DIO_u8HIGH);
     7f2:	d6 01       	movw	r26, r12
     7f4:	aa 55       	subi	r26, 0x5A	; 90
     7f6:	bf 4f       	sbci	r27, 0xFF	; 255
     7f8:	f6 01       	movw	r30, r12
     7fa:	ee 55       	subi	r30, 0x5E	; 94
     7fc:	ff 4f       	sbci	r31, 0xFF	; 255
     7fe:	41 e0       	ldi	r20, 0x01	; 1
     800:	6c 91       	ld	r22, X
     802:	80 81       	ld	r24, Z
     804:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
	static u8 Local_KEYPAD_CHAR[ROW_NUM][COLUMN_NUM] = KEYPAD_CHARACTERS;
	
	u8 Local_u8ColumnIndex, Local_u8RowIndex, Local_u8PinState;
	u8 Local_u8PressedKey = KEYPAD_No_Key_Pressed;
	
	for(Local_u8ColumnIndex = 0; Local_u8ColumnIndex < COLUMN_NUM; Local_u8ColumnIndex++)
     808:	0f 5f       	subi	r16, 0xFF	; 255
     80a:	04 30       	cpi	r16, 0x04	; 4
     80c:	08 f4       	brcc	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80e:	af cf       	rjmp	.-162    	; 0x76e <KEYPAD_u8GetPressedKey+0x1a>
		/* Deactive the current column */
		DIO_enuSetPinVal(Local_Au8ColumnsPorts[Local_u8ColumnIndex], Local_Au8ColumnsPins[Local_u8ColumnIndex], DIO_u8HIGH);
	}
	
	
	return Local_u8PressedKey;
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	0f 90       	pop	r0
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	cf 90       	pop	r12
     824:	08 95       	ret

00000826 <LCD_vidTrigger_LATCH>:
	if(Local_enuErrorState != ES_OK)
		return Local_enuErrorState;
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
     826:	41 e0       	ldi	r20, 0x01	; 1
     828:	62 e0       	ldi	r22, 0x02	; 2
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
     830:	83 ec       	ldi	r24, 0xC3	; 195
     832:	99 e0       	ldi	r25, 0x09	; 9
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	f1 f7       	brne	.-4      	; 0x834 <LCD_vidTrigger_LATCH+0xe>
     838:	00 c0       	rjmp	.+0      	; 0x83a <LCD_vidTrigger_LATCH+0x14>
     83a:	00 00       	nop
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	62 e0       	ldi	r22, 0x02	; 2
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
     846:	08 95       	ret

00000848 <LCD_enuLatch>:
     848:	cf 93       	push	r28
     84a:	c8 2f       	mov	r28, r24
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
     856:	81 11       	cpse	r24, r1
     858:	51 c0       	rjmp	.+162    	; 0x8fc <__stack+0x9d>
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	62 e0       	ldi	r22, 0x02	; 2
     85e:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
     862:	81 11       	cpse	r24, r1
     864:	4b c0       	rjmp	.+150    	; 0x8fc <__stack+0x9d>
     866:	4c 2f       	mov	r20, r28
     868:	44 1f       	adc	r20, r20
     86a:	44 27       	eor	r20, r20
     86c:	44 1f       	adc	r20, r20
     86e:	67 e0       	ldi	r22, 0x07	; 7
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
     876:	81 11       	cpse	r24, r1
     878:	41 c0       	rjmp	.+130    	; 0x8fc <__stack+0x9d>
     87a:	c6 fb       	bst	r28, 6
     87c:	44 27       	eor	r20, r20
     87e:	40 f9       	bld	r20, 0
     880:	66 e0       	ldi	r22, 0x06	; 6
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
     888:	81 11       	cpse	r24, r1
     88a:	38 c0       	rjmp	.+112    	; 0x8fc <__stack+0x9d>
     88c:	c5 fb       	bst	r28, 5
     88e:	44 27       	eor	r20, r20
     890:	40 f9       	bld	r20, 0
     892:	65 e0       	ldi	r22, 0x05	; 5
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
     89a:	81 11       	cpse	r24, r1
     89c:	2f c0       	rjmp	.+94     	; 0x8fc <__stack+0x9d>
     89e:	c4 fb       	bst	r28, 4
     8a0:	44 27       	eor	r20, r20
     8a2:	40 f9       	bld	r20, 0
     8a4:	64 e0       	ldi	r22, 0x04	; 4
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
     8ac:	81 11       	cpse	r24, r1
     8ae:	26 c0       	rjmp	.+76     	; 0x8fc <__stack+0x9d>
     8b0:	c3 fb       	bst	r28, 3
     8b2:	44 27       	eor	r20, r20
     8b4:	40 f9       	bld	r20, 0
     8b6:	63 e0       	ldi	r22, 0x03	; 3
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
     8be:	81 11       	cpse	r24, r1
     8c0:	1d c0       	rjmp	.+58     	; 0x8fc <__stack+0x9d>
     8c2:	c2 fb       	bst	r28, 2
     8c4:	44 27       	eor	r20, r20
     8c6:	40 f9       	bld	r20, 0
     8c8:	62 e0       	ldi	r22, 0x02	; 2
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
     8d0:	81 11       	cpse	r24, r1
     8d2:	14 c0       	rjmp	.+40     	; 0x8fc <__stack+0x9d>
     8d4:	c1 fb       	bst	r28, 1
     8d6:	44 27       	eor	r20, r20
     8d8:	40 f9       	bld	r20, 0
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
     8e2:	81 11       	cpse	r24, r1
     8e4:	0b c0       	rjmp	.+22     	; 0x8fc <__stack+0x9d>
     8e6:	4c 2f       	mov	r20, r28
     8e8:	41 70       	andi	r20, 0x01	; 1
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
     8f2:	81 11       	cpse	r24, r1
     8f4:	03 c0       	rjmp	.+6      	; 0x8fc <__stack+0x9d>
     8f6:	0e 94 13 04 	call	0x826	; 0x826 <LCD_vidTrigger_LATCH>
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <LCD_inlenuSendCommand>:
     900:	cf 93       	push	r28
     902:	c8 2f       	mov	r28, r24
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
     90e:	81 11       	cpse	r24, r1
     910:	03 c0       	rjmp	.+6      	; 0x918 <LCD_inlenuSendCommand+0x18>
     912:	8c 2f       	mov	r24, r28
     914:	0e 94 24 04 	call	0x848	; 0x848 <LCD_enuLatch>
     918:	cf 91       	pop	r28
     91a:	08 95       	ret

0000091c <LCD_enuInit>:
     91c:	41 e0       	ldi	r20, 0x01	; 1
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
     926:	81 11       	cpse	r24, r1
     928:	77 c0       	rjmp	.+238    	; 0xa18 <LCD_enuInit+0xfc>
     92a:	41 e0       	ldi	r20, 0x01	; 1
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
     932:	81 11       	cpse	r24, r1
     934:	71 c0       	rjmp	.+226    	; 0xa18 <LCD_enuInit+0xfc>
     936:	41 e0       	ldi	r20, 0x01	; 1
     938:	62 e0       	ldi	r22, 0x02	; 2
     93a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
     93e:	81 11       	cpse	r24, r1
     940:	6b c0       	rjmp	.+214    	; 0xa18 <LCD_enuInit+0xfc>
     942:	41 e0       	ldi	r20, 0x01	; 1
     944:	67 e0       	ldi	r22, 0x07	; 7
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
     94c:	81 11       	cpse	r24, r1
     94e:	64 c0       	rjmp	.+200    	; 0xa18 <LCD_enuInit+0xfc>
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	66 e0       	ldi	r22, 0x06	; 6
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
     95a:	81 11       	cpse	r24, r1
     95c:	5d c0       	rjmp	.+186    	; 0xa18 <LCD_enuInit+0xfc>
     95e:	41 e0       	ldi	r20, 0x01	; 1
     960:	65 e0       	ldi	r22, 0x05	; 5
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
     968:	81 11       	cpse	r24, r1
     96a:	56 c0       	rjmp	.+172    	; 0xa18 <LCD_enuInit+0xfc>
     96c:	41 e0       	ldi	r20, 0x01	; 1
     96e:	64 e0       	ldi	r22, 0x04	; 4
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
     976:	81 11       	cpse	r24, r1
     978:	4f c0       	rjmp	.+158    	; 0xa18 <LCD_enuInit+0xfc>
     97a:	8d e2       	ldi	r24, 0x2D	; 45
     97c:	92 e2       	ldi	r25, 0x22	; 34
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	f1 f7       	brne	.-4      	; 0x97e <LCD_enuInit+0x62>
     982:	00 c0       	rjmp	.+0      	; 0x984 <LCD_enuInit+0x68>
     984:	00 00       	nop
     986:	41 e0       	ldi	r20, 0x01	; 1
     988:	63 e0       	ldi	r22, 0x03	; 3
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
     990:	81 11       	cpse	r24, r1
     992:	42 c0       	rjmp	.+132    	; 0xa18 <LCD_enuInit+0xfc>
     994:	41 e0       	ldi	r20, 0x01	; 1
     996:	62 e0       	ldi	r22, 0x02	; 2
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
     99e:	81 11       	cpse	r24, r1
     9a0:	3b c0       	rjmp	.+118    	; 0xa18 <LCD_enuInit+0xfc>
     9a2:	41 e0       	ldi	r20, 0x01	; 1
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
     9ac:	81 11       	cpse	r24, r1
     9ae:	34 c0       	rjmp	.+104    	; 0xa18 <LCD_enuInit+0xfc>
     9b0:	41 e0       	ldi	r20, 0x01	; 1
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	0e 94 ce 05 	call	0xb9c	; 0xb9c <DIO_enuSetPinDirection>
     9ba:	81 11       	cpse	r24, r1
     9bc:	2d c0       	rjmp	.+90     	; 0xa18 <LCD_enuInit+0xfc>
     9be:	88 e3       	ldi	r24, 0x38	; 56
     9c0:	0e 94 80 04 	call	0x900	; 0x900 <LCD_inlenuSendCommand>
     9c4:	81 11       	cpse	r24, r1
     9c6:	28 c0       	rjmp	.+80     	; 0xa18 <LCD_enuInit+0xfc>
     9c8:	89 ef       	ldi	r24, 0xF9	; 249
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <LCD_enuInit+0xb0>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <LCD_enuInit+0xb6>
     9d2:	00 00       	nop
     9d4:	8f e0       	ldi	r24, 0x0F	; 15
     9d6:	0e 94 80 04 	call	0x900	; 0x900 <LCD_inlenuSendCommand>
     9da:	81 11       	cpse	r24, r1
     9dc:	1d c0       	rjmp	.+58     	; 0xa18 <LCD_enuInit+0xfc>
     9de:	89 ef       	ldi	r24, 0xF9	; 249
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <LCD_enuInit+0xc6>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <LCD_enuInit+0xcc>
     9e8:	00 00       	nop
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	0e 94 80 04 	call	0x900	; 0x900 <LCD_inlenuSendCommand>
     9f0:	81 11       	cpse	r24, r1
     9f2:	12 c0       	rjmp	.+36     	; 0xa18 <LCD_enuInit+0xfc>
     9f4:	83 ef       	ldi	r24, 0xF3	; 243
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <LCD_enuInit+0xdc>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <LCD_enuInit+0xe2>
     9fe:	00 00       	nop
     a00:	86 e0       	ldi	r24, 0x06	; 6
     a02:	0e 94 80 04 	call	0x900	; 0x900 <LCD_inlenuSendCommand>
     a06:	81 11       	cpse	r24, r1
     a08:	07 c0       	rjmp	.+14     	; 0xa18 <LCD_enuInit+0xfc>
     a0a:	89 ef       	ldi	r24, 0xF9	; 249
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <LCD_enuInit+0xf2>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <LCD_enuInit+0xf8>
     a14:	00 00       	nop
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	08 95       	ret

00000a1a <LCD_enuGoToPosition>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuGoToPosition(u8 Copy_u8Line, u8 Copy_u8Position)
{
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8Position >= 0 && Copy_u8Position < 16)
     a1e:	60 31       	cpi	r22, 0x10	; 16
     a20:	48 f5       	brcc	.+82     	; 0xa74 <LCD_enuGoToPosition+0x5a>
     a22:	c6 2f       	mov	r28, r22
	{
		if(Copy_u8Line == LCD_FIRST_LINE)
     a24:	81 30       	cpi	r24, 0x01	; 1
     a26:	89 f4       	brne	.+34     	; 0xa4a <LCD_enuGoToPosition+0x30>
		{
			Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_FIRST_ROW + Copy_u8Position);
     a28:	d0 e8       	ldi	r29, 0x80	; 128
     a2a:	d6 0f       	add	r29, r22
static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command)
{
	ES_t Local_enuErrorState = ES_NOK;
		
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     a36:	81 11       	cpse	r24, r1
     a38:	03 c0       	rjmp	.+6      	; 0xa40 <LCD_enuGoToPosition+0x26>
		return Local_enuErrorState;	

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
     a3a:	8d 2f       	mov	r24, r29
     a3c:	0e 94 24 04 	call	0x848	; 0x848 <LCD_enuLatch>
	if(Copy_u8Position >= 0 && Copy_u8Position < 16)
	{
		if(Copy_u8Line == LCD_FIRST_LINE)
		{
			Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_FIRST_ROW + Copy_u8Position);
			if(Local_enuErrorState != ES_OK)
     a40:	81 11       	cpse	r24, r1
     a42:	1b c0       	rjmp	.+54     	; 0xa7a <LCD_enuGoToPosition+0x60>
				return Local_enuErrorState;
				
			LCD_u8PosCounter = Copy_u8Position;
     a44:	c0 93 c7 00 	sts	0x00C7, r28	; 0x8000c7 <LCD_u8PosCounter>
     a48:	18 c0       	rjmp	.+48     	; 0xa7a <LCD_enuGoToPosition+0x60>
		}
		else if(Copy_u8Line == LCD_SECOND_LINE)
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	a9 f4       	brne	.+42     	; 0xa78 <LCD_enuGoToPosition+0x5e>
		{
			Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_SECOND_ROW + Copy_u8Position);
     a4e:	d0 ec       	ldi	r29, 0xC0	; 192
     a50:	d6 0f       	add	r29, r22
static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command)
{
	ES_t Local_enuErrorState = ES_NOK;
		
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     a5c:	81 11       	cpse	r24, r1
     a5e:	03 c0       	rjmp	.+6      	; 0xa66 <LCD_enuGoToPosition+0x4c>
		return Local_enuErrorState;	

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
     a60:	8d 2f       	mov	r24, r29
     a62:	0e 94 24 04 	call	0x848	; 0x848 <LCD_enuLatch>
			LCD_u8PosCounter = Copy_u8Position;
		}
		else if(Copy_u8Line == LCD_SECOND_LINE)
		{
			Local_enuErrorState = LCD_inlenuSendCommand(LCD_BEGIN_AT_SECOND_ROW + Copy_u8Position);
			if(Local_enuErrorState != ES_OK)
     a66:	81 11       	cpse	r24, r1
     a68:	08 c0       	rjmp	.+16     	; 0xa7a <LCD_enuGoToPosition+0x60>
				return Local_enuErrorState;
				
			LCD_u8PosCounter = Copy_u8Position + 16;
     a6a:	60 e1       	ldi	r22, 0x10	; 16
     a6c:	6c 0f       	add	r22, r28
     a6e:	60 93 c7 00 	sts	0x00C7, r22	; 0x8000c7 <LCD_u8PosCounter>
     a72:	03 c0       	rjmp	.+6      	; 0xa7a <LCD_enuGoToPosition+0x60>
		}
	}
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <LCD_enuGoToPosition+0x60>
     a78:	80 e0       	ldi	r24, 0x00	; 0
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <LCD_vidCheckPosition>:
 * @note		: none
 ******************************************************************************
**/
static void LCD_vidCheckPosition(void)
{
	if(LCD_u8PosCounter == 16)
     a80:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <LCD_u8PosCounter>
     a84:	80 31       	cpi	r24, 0x10	; 16
     a86:	51 f4       	brne	.+20     	; 0xa9c <LCD_vidCheckPosition+0x1c>
	{
		LCD_enuGoToPosition(LCD_SECOND_LINE, 0);
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	82 e0       	ldi	r24, 0x02	; 2
     a8c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_enuGoToPosition>
		LCD_u8PosCounter++;
     a90:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <LCD_u8PosCounter>
     a94:	8f 5f       	subi	r24, 0xFF	; 255
     a96:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <LCD_u8PosCounter>
     a9a:	08 95       	ret
	}
	else if(LCD_u8PosCounter == 32)
     a9c:	80 32       	cpi	r24, 0x20	; 32
     a9e:	89 f4       	brne	.+34     	; 0xac2 <LCD_vidCheckPosition+0x42>
static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command)
{
	ES_t Local_enuErrorState = ES_NOK;
		
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     aaa:	81 11       	cpse	r24, r1
     aac:	03 c0       	rjmp	.+6      	; 0xab4 <LCD_vidCheckPosition+0x34>
		return Local_enuErrorState;	

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	0e 94 24 04 	call	0x848	; 0x848 <LCD_enuLatch>
		LCD_u8PosCounter++;
	}
	else if(LCD_u8PosCounter == 32)
	{
		LCD_inlenuSendCommand(LCD_Clear_Display);
		LCD_enuGoToPosition(LCD_FIRST_LINE, 0);
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <LCD_enuGoToPosition>
		LCD_u8PosCounter = 0;
     abc:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <LCD_u8PosCounter>
     ac0:	08 95       	ret
	}
	else
	{
		LCD_u8PosCounter++;
     ac2:	8f 5f       	subi	r24, 0xFF	; 255
     ac4:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <LCD_u8PosCounter>
     ac8:	08 95       	ret

00000aca <LCD_enuDisplayChar>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
     aca:	cf 93       	push	r28
     acc:	c8 2f       	mov	r28, r24
	ES_t Local_enuErrorState = ES_NOK;
	
	/* Check position in case of we send data */
	LCD_vidCheckPosition();
     ace:	0e 94 40 05 	call	0xa80	; 0xa80 <LCD_vidCheckPosition>
	
	/* RS --> High to write Data */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8HIGH);
     ad2:	41 e0       	ldi	r20, 0x01	; 1
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     adc:	81 11       	cpse	r24, r1
     ade:	03 c0       	rjmp	.+6      	; 0xae6 <LCD_enuDisplayChar+0x1c>
		return Local_enuErrorState;
	
	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Data);
     ae0:	8c 2f       	mov	r24, r28
     ae2:	0e 94 24 04 	call	0x848	; 0x848 <LCD_enuLatch>
	if(Local_enuErrorState != ES_OK)
		return Local_enuErrorState;
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <LCD_vidClearScreen>:
static inline ES_t LCD_inlenuSendCommand(u8 Copy_u8Command)
{
	ES_t Local_enuErrorState = ES_NOK;
		
	/* RS --> LOW to write Command */
	Local_enuErrorState = DIO_enuSetPinVal(RS_PORT, RS_PIN, DIO_u8LOW);
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	0e 94 40 06 	call	0xc80	; 0xc80 <DIO_enuSetPinVal>
	if(Local_enuErrorState != ES_OK)
     af4:	81 11       	cpse	r24, r1
     af6:	03 c0       	rjmp	.+6      	; 0xafe <LCD_vidClearScreen+0x14>
		return Local_enuErrorState;	

	/* Call Latch Function */
	Local_enuErrorState = LCD_enuLatch(Copy_u8Command);
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	0e 94 24 04 	call	0x848	; 0x848 <LCD_enuLatch>
 ******************************************************************************
**/
void LCD_vidClearScreen(void)
{
	LCD_inlenuSendCommand(LCD_Clear_Display);
	LCD_u8PosCounter = 0;
     afe:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <LCD_u8PosCounter>
     b02:	08 95       	ret

00000b04 <LCD_enuWriteString>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuWriteString(u8 *Copy_pu8Str)
{
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	ec 01       	movw	r28, r24
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_pu8Str != NULL)
     b0a:	89 2b       	or	r24, r25
     b0c:	39 f4       	brne	.+14     	; 0xb1c <LCD_enuWriteString+0x18>
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		return ES_NULL_POINTER;
     b0e:	82 e0       	ldi	r24, 0x02	; 2
     b10:	08 c0       	rjmp	.+16     	; 0xb22 <LCD_enuWriteString+0x1e>
	
	if(Copy_pu8Str != NULL)
	{
		while(*Copy_pu8Str != '\0')
		{
			Local_enuErrorState = LCD_enuDisplayChar(*Copy_pu8Str);
     b12:	0e 94 65 05 	call	0xaca	; 0xaca <LCD_enuDisplayChar>
			if(Local_enuErrorState != ES_OK)
     b16:	81 11       	cpse	r24, r1
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <LCD_enuWriteString+0x1e>
				return Local_enuErrorState;
			Copy_pu8Str++;
     b1a:	21 96       	adiw	r28, 0x01	; 1
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_pu8Str != NULL)
	{
		while(*Copy_pu8Str != '\0')
     b1c:	88 81       	ld	r24, Y
     b1e:	81 11       	cpse	r24, r1
     b20:	f8 cf       	rjmp	.-16     	; 0xb12 <LCD_enuWriteString+0xe>
		return ES_NULL_POINTER;
	}
	
	Local_enuErrorState = ES_OK;
	return Local_enuErrorState;
}
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	08 95       	ret

00000b28 <LCD_enuWriteNumber>:
 * @retval		: ES_t --> it returns the state of excution of this function
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuWriteNumber(int Copy_s32Number)
{
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	60 97       	sbiw	r28, 0x10	; 16
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;
	
	sprintf(Local_As8Container, "%d", Copy_s32Number);
     b3e:	9f 93       	push	r25
     b40:	8f 93       	push	r24
     b42:	8a ea       	ldi	r24, 0xAA	; 170
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	9f 93       	push	r25
     b48:	8f 93       	push	r24
     b4a:	ce 01       	movw	r24, r28
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	9f 93       	push	r25
     b50:	8f 93       	push	r24
     b52:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <sprintf>
	
	for(Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0'; Local_u8Iterator++)
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	10 e0       	ldi	r17, 0x00	; 0
 * @note		: none
 ******************************************************************************
**/
ES_t LCD_enuWriteNumber(int Copy_s32Number)
{
	ES_t Local_enuErrorState = ES_NOK;
     b64:	81 e0       	ldi	r24, 0x01	; 1
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;
	
	sprintf(Local_As8Container, "%d", Copy_s32Number);
	
	for(Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0'; Local_u8Iterator++)
     b66:	04 c0       	rjmp	.+8      	; 0xb70 <LCD_enuWriteNumber+0x48>
	{
		Local_enuErrorState = LCD_enuDisplayChar(Local_As8Container[Local_u8Iterator]);
     b68:	89 2f       	mov	r24, r25
     b6a:	0e 94 65 05 	call	0xaca	; 0xaca <LCD_enuDisplayChar>
	u8 Local_As8Container[16];
	u8 Local_u8Iterator;
	
	sprintf(Local_As8Container, "%d", Copy_s32Number);
	
	for(Local_u8Iterator = 0; Local_As8Container[Local_u8Iterator] != '\0'; Local_u8Iterator++)
     b6e:	1f 5f       	subi	r17, 0xFF	; 255
     b70:	e1 e0       	ldi	r30, 0x01	; 1
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	ec 0f       	add	r30, r28
     b76:	fd 1f       	adc	r31, r29
     b78:	e1 0f       	add	r30, r17
     b7a:	f1 1d       	adc	r31, r1
     b7c:	90 81       	ld	r25, Z
     b7e:	91 11       	cpse	r25, r1
     b80:	f3 cf       	rjmp	.-26     	; 0xb68 <LCD_enuWriteNumber+0x40>
	{
		Local_enuErrorState = LCD_enuDisplayChar(Local_As8Container[Local_u8Iterator]);
	}
	
	return Local_enuErrorState;
     b82:	60 96       	adiw	r28, 0x10	; 16
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	08 95       	ret

00000b96 <main>:
#include "KEYPAD_config.h"
#include "KEYPAD_int.h"

int main(void)
{
	CALCULATOR_vidRun();
     b96:	0e 94 37 03 	call	0x66e	; 0x66e <CALCULATOR_vidRun>
     b9a:	ff cf       	rjmp	.-2      	; 0xb9a <main+0x4>

00000b9c <DIO_enuSetPinDirection>:
**/
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
     b9c:	84 30       	cpi	r24, 0x04	; 4
     b9e:	08 f0       	brcs	.+2      	; 0xba2 <DIO_enuSetPinDirection+0x6>
     ba0:	67 c0       	rjmp	.+206    	; 0xc70 <DIO_enuSetPinDirection+0xd4>
     ba2:	68 30       	cpi	r22, 0x08	; 8
     ba4:	08 f0       	brcs	.+2      	; 0xba8 <DIO_enuSetPinDirection+0xc>
     ba6:	66 c0       	rjmp	.+204    	; 0xc74 <DIO_enuSetPinDirection+0xd8>
     ba8:	42 30       	cpi	r20, 0x02	; 2
     baa:	08 f0       	brcs	.+2      	; 0xbae <DIO_enuSetPinDirection+0x12>
     bac:	65 c0       	rjmp	.+202    	; 0xc78 <DIO_enuSetPinDirection+0xdc>
	{
		switch(Copy_u8PortID)
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	e9 f0       	breq	.+58     	; 0xbec <DIO_enuSetPinDirection+0x50>
     bb2:	30 f0       	brcs	.+12     	; 0xbc0 <DIO_enuSetPinDirection+0x24>
     bb4:	82 30       	cpi	r24, 0x02	; 2
     bb6:	81 f1       	breq	.+96     	; 0xc18 <DIO_enuSetPinDirection+0x7c>
     bb8:	83 30       	cpi	r24, 0x03	; 3
     bba:	09 f4       	brne	.+2      	; 0xbbe <DIO_enuSetPinDirection+0x22>
     bbc:	43 c0       	rjmp	.+134    	; 0xc44 <DIO_enuSetPinDirection+0xa8>
     bbe:	5e c0       	rjmp	.+188    	; 0xc7c <DIO_enuSetPinDirection+0xe0>
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	06 2e       	mov	r0, r22
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <DIO_enuSetPinDirection+0x30>
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	0a 94       	dec	r0
     bce:	e2 f7       	brpl	.-8      	; 0xbc8 <DIO_enuSetPinDirection+0x2c>
     bd0:	80 95       	com	r24
     bd2:	2a b3       	in	r18, 0x1a	; 26
     bd4:	28 23       	and	r18, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
     bd6:	84 2f       	mov	r24, r20
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <DIO_enuSetPinDirection+0x44>
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	6a 95       	dec	r22
     be2:	e2 f7       	brpl	.-8      	; 0xbdc <DIO_enuSetPinDirection+0x40>
     be4:	82 2b       	or	r24, r18
     be6:	8a bb       	out	0x1a, r24	; 26
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     be8:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
			break;
     bea:	08 95       	ret
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
     bec:	21 e0       	ldi	r18, 0x01	; 1
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	06 2e       	mov	r0, r22
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <DIO_enuSetPinDirection+0x5c>
     bf4:	22 0f       	add	r18, r18
     bf6:	33 1f       	adc	r19, r19
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <DIO_enuSetPinDirection+0x58>
     bfc:	20 95       	com	r18
     bfe:	87 b3       	in	r24, 0x17	; 23
     c00:	28 23       	and	r18, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
     c02:	84 2f       	mov	r24, r20
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <DIO_enuSetPinDirection+0x70>
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	6a 95       	dec	r22
     c0e:	e2 f7       	brpl	.-8      	; 0xc08 <DIO_enuSetPinDirection+0x6c>
     c10:	82 2b       	or	r24, r18
     c12:	87 bb       	out	0x17, r24	; 23
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     c14:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
			break;
     c16:	08 95       	ret
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
     c18:	21 e0       	ldi	r18, 0x01	; 1
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	06 2e       	mov	r0, r22
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <DIO_enuSetPinDirection+0x88>
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <DIO_enuSetPinDirection+0x84>
     c28:	20 95       	com	r18
     c2a:	84 b3       	in	r24, 0x14	; 20
     c2c:	28 23       	and	r18, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
     c2e:	84 2f       	mov	r24, r20
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <DIO_enuSetPinDirection+0x9c>
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	6a 95       	dec	r22
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <DIO_enuSetPinDirection+0x98>
     c3c:	82 2b       	or	r24, r18
     c3e:	84 bb       	out	0x14, r24	; 20
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     c40:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
			break;
     c42:	08 95       	ret
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
     c44:	21 e0       	ldi	r18, 0x01	; 1
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	06 2e       	mov	r0, r22
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_enuSetPinDirection+0xb4>
     c4c:	22 0f       	add	r18, r18
     c4e:	33 1f       	adc	r19, r19
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_enuSetPinDirection+0xb0>
     c54:	20 95       	com	r18
     c56:	81 b3       	in	r24, 0x11	; 17
     c58:	28 23       	and	r18, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
     c5a:	84 2f       	mov	r24, r20
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <DIO_enuSetPinDirection+0xc8>
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	6a 95       	dec	r22
     c66:	e2 f7       	brpl	.-8      	; 0xc60 <DIO_enuSetPinDirection+0xc4>
     c68:	82 2b       	or	r24, r18
     c6a:	81 bb       	out	0x11, r24	; 17
			break;
		}
		Local_enuErrorState = ES_OK;
     c6c:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
     c6e:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	08 95       	ret
     c74:	83 e0       	ldi	r24, 0x03	; 3
     c76:	08 95       	ret
     c78:	83 e0       	ldi	r24, 0x03	; 3
     c7a:	08 95       	ret
			case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     c7c:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
     c7e:	08 95       	ret

00000c80 <DIO_enuSetPinVal>:
**/
ES_t DIO_enuSetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
     c80:	84 30       	cpi	r24, 0x04	; 4
     c82:	08 f0       	brcs	.+2      	; 0xc86 <DIO_enuSetPinVal+0x6>
     c84:	67 c0       	rjmp	.+206    	; 0xd54 <DIO_enuSetPinVal+0xd4>
     c86:	68 30       	cpi	r22, 0x08	; 8
     c88:	08 f0       	brcs	.+2      	; 0xc8c <DIO_enuSetPinVal+0xc>
     c8a:	66 c0       	rjmp	.+204    	; 0xd58 <DIO_enuSetPinVal+0xd8>
     c8c:	42 30       	cpi	r20, 0x02	; 2
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <DIO_enuSetPinVal+0x12>
     c90:	65 c0       	rjmp	.+202    	; 0xd5c <DIO_enuSetPinVal+0xdc>
	{
		switch(Copy_u8PortID)
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	e9 f0       	breq	.+58     	; 0xcd0 <DIO_enuSetPinVal+0x50>
     c96:	30 f0       	brcs	.+12     	; 0xca4 <DIO_enuSetPinVal+0x24>
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	81 f1       	breq	.+96     	; 0xcfc <DIO_enuSetPinVal+0x7c>
     c9c:	83 30       	cpi	r24, 0x03	; 3
     c9e:	09 f4       	brne	.+2      	; 0xca2 <DIO_enuSetPinVal+0x22>
     ca0:	43 c0       	rjmp	.+134    	; 0xd28 <DIO_enuSetPinVal+0xa8>
     ca2:	5e c0       	rjmp	.+188    	; 0xd60 <DIO_enuSetPinVal+0xe0>
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	06 2e       	mov	r0, r22
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <DIO_enuSetPinVal+0x30>
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	0a 94       	dec	r0
     cb2:	e2 f7       	brpl	.-8      	; 0xcac <DIO_enuSetPinVal+0x2c>
     cb4:	80 95       	com	r24
     cb6:	2b b3       	in	r18, 0x1b	; 27
     cb8:	28 23       	and	r18, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
     cba:	84 2f       	mov	r24, r20
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <DIO_enuSetPinVal+0x44>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	6a 95       	dec	r22
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <DIO_enuSetPinVal+0x40>
     cc8:	82 2b       	or	r24, r18
     cca:	8b bb       	out	0x1b, r24	; 27
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     ccc:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8PortID)
		{
			case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
			break;
     cce:	08 95       	ret
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	06 2e       	mov	r0, r22
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_enuSetPinVal+0x5c>
     cd8:	22 0f       	add	r18, r18
     cda:	33 1f       	adc	r19, r19
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_enuSetPinVal+0x58>
     ce0:	20 95       	com	r18
     ce2:	88 b3       	in	r24, 0x18	; 24
     ce4:	28 23       	and	r18, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
     ce6:	84 2f       	mov	r24, r20
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <DIO_enuSetPinVal+0x70>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	6a 95       	dec	r22
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <DIO_enuSetPinVal+0x6c>
     cf4:	82 2b       	or	r24, r18
     cf6:	88 bb       	out	0x18, r24	; 24
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     cf8:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
			break;
     cfa:	08 95       	ret
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
     cfc:	21 e0       	ldi	r18, 0x01	; 1
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	06 2e       	mov	r0, r22
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <DIO_enuSetPinVal+0x88>
     d04:	22 0f       	add	r18, r18
     d06:	33 1f       	adc	r19, r19
     d08:	0a 94       	dec	r0
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <DIO_enuSetPinVal+0x84>
     d0c:	20 95       	com	r18
     d0e:	85 b3       	in	r24, 0x15	; 21
     d10:	28 23       	and	r18, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
     d12:	84 2f       	mov	r24, r20
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_enuSetPinVal+0x9c>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	6a 95       	dec	r22
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_enuSetPinVal+0x98>
     d20:	82 2b       	or	r24, r18
     d22:	85 bb       	out	0x15, r24	; 21
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     d24:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
			break;
     d26:	08 95       	ret
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
     d28:	21 e0       	ldi	r18, 0x01	; 1
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	06 2e       	mov	r0, r22
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <DIO_enuSetPinVal+0xb4>
     d30:	22 0f       	add	r18, r18
     d32:	33 1f       	adc	r19, r19
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <DIO_enuSetPinVal+0xb0>
     d38:	20 95       	com	r18
     d3a:	82 b3       	in	r24, 0x12	; 18
     d3c:	28 23       	and	r18, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
     d3e:	84 2f       	mov	r24, r20
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_enuSetPinVal+0xc8>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	6a 95       	dec	r22
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_enuSetPinVal+0xc4>
     d4c:	82 2b       	or	r24, r18
     d4e:	82 bb       	out	0x12, r24	; 18
			break;
		}
		Local_enuErrorState = ES_OK;
     d50:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
     d52:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	08 95       	ret
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	08 95       	ret
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	08 95       	ret
			case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
			break;
		}
		Local_enuErrorState = ES_OK;
     d60:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}
	
	return Local_enuErrorState;
}
     d62:	08 95       	ret

00000d64 <DIO_enuGetPinVal>:
**/
ES_t DIO_enuGetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
	ES_t Local_enuErrorState = ES_NOK;
	
	if(Copy_pu8Value != NULL)
     d64:	41 15       	cp	r20, r1
     d66:	51 05       	cpc	r21, r1
     d68:	e1 f1       	breq	.+120    	; 0xde2 <DIO_enuGetPinVal+0x7e>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
     d6a:	84 30       	cpi	r24, 0x04	; 4
     d6c:	e0 f5       	brcc	.+120    	; 0xde6 <DIO_enuGetPinVal+0x82>
     d6e:	68 30       	cpi	r22, 0x08	; 8
     d70:	e0 f5       	brcc	.+120    	; 0xdea <DIO_enuGetPinVal+0x86>
		{
			switch(Copy_u8PortID)
     d72:	81 30       	cpi	r24, 0x01	; 1
     d74:	91 f0       	breq	.+36     	; 0xd9a <DIO_enuGetPinVal+0x36>
     d76:	28 f0       	brcs	.+10     	; 0xd82 <DIO_enuGetPinVal+0x1e>
     d78:	82 30       	cpi	r24, 0x02	; 2
     d7a:	d9 f0       	breq	.+54     	; 0xdb2 <DIO_enuGetPinVal+0x4e>
     d7c:	83 30       	cpi	r24, 0x03	; 3
     d7e:	29 f1       	breq	.+74     	; 0xdca <DIO_enuGetPinVal+0x66>
     d80:	36 c0       	rjmp	.+108    	; 0xdee <DIO_enuGetPinVal+0x8a>
			{
				case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
     d82:	89 b3       	in	r24, 0x19	; 25
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_enuGetPinVal+0x28>
     d88:	95 95       	asr	r25
     d8a:	87 95       	ror	r24
     d8c:	6a 95       	dec	r22
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_enuGetPinVal+0x24>
     d90:	81 70       	andi	r24, 0x01	; 1
     d92:	fa 01       	movw	r30, r20
     d94:	80 83       	st	Z, r24
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
		Local_enuErrorState = ES_OK;
     d96:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8PortID)
			{
				case DIO_PORTA:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
     d98:	08 95       	ret
				
				case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
     d9a:	86 b3       	in	r24, 0x16	; 22
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_enuGetPinVal+0x40>
     da0:	95 95       	asr	r25
     da2:	87 95       	ror	r24
     da4:	6a 95       	dec	r22
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_enuGetPinVal+0x3c>
     da8:	81 70       	andi	r24, 0x01	; 1
     daa:	fa 01       	movw	r30, r20
     dac:	80 83       	st	Z, r24
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
		Local_enuErrorState = ES_OK;
     dae:	80 e0       	ldi	r24, 0x00	; 0
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
				
				case DIO_PORTB:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
     db0:	08 95       	ret
				
				case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
     db2:	83 b3       	in	r24, 0x13	; 19
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <DIO_enuGetPinVal+0x58>
     db8:	95 95       	asr	r25
     dba:	87 95       	ror	r24
     dbc:	6a 95       	dec	r22
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <DIO_enuGetPinVal+0x54>
     dc0:	81 70       	andi	r24, 0x01	; 1
     dc2:	fa 01       	movw	r30, r20
     dc4:	80 83       	st	Z, r24
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
		Local_enuErrorState = ES_OK;
     dc6:	80 e0       	ldi	r24, 0x00	; 0
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
				
				case DIO_PORTC:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
     dc8:	08 95       	ret
				
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
     dca:	80 b3       	in	r24, 0x10	; 16
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <DIO_enuGetPinVal+0x70>
     dd0:	95 95       	asr	r25
     dd2:	87 95       	ror	r24
     dd4:	6a 95       	dec	r22
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <DIO_enuGetPinVal+0x6c>
     dd8:	81 70       	andi	r24, 0x01	; 1
     dda:	fa 01       	movw	r30, r20
     ddc:	80 83       	st	Z, r24
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
		Local_enuErrorState = ES_OK;
     dde:	80 e0       	ldi	r24, 0x00	; 0
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
				
				case DIO_PORTD:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
				break;
     de0:	08 95       	ret
		}
		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	08 95       	ret
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
		Local_enuErrorState = ES_OK;
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	08 95       	ret
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	08 95       	ret
     dee:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}
	
	return Local_enuErrorState;
}
     df0:	08 95       	ret

00000df2 <__subsf3>:
     df2:	50 58       	subi	r21, 0x80	; 128

00000df4 <__addsf3>:
     df4:	bb 27       	eor	r27, r27
     df6:	aa 27       	eor	r26, r26
     df8:	0e 94 11 07 	call	0xe22	; 0xe22 <__addsf3x>
     dfc:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__fp_round>
     e00:	0e 94 1b 08 	call	0x1036	; 0x1036 <__fp_pscA>
     e04:	38 f0       	brcs	.+14     	; 0xe14 <__addsf3+0x20>
     e06:	0e 94 22 08 	call	0x1044	; 0x1044 <__fp_pscB>
     e0a:	20 f0       	brcs	.+8      	; 0xe14 <__addsf3+0x20>
     e0c:	39 f4       	brne	.+14     	; 0xe1c <__addsf3+0x28>
     e0e:	9f 3f       	cpi	r25, 0xFF	; 255
     e10:	19 f4       	brne	.+6      	; 0xe18 <__addsf3+0x24>
     e12:	26 f4       	brtc	.+8      	; 0xe1c <__addsf3+0x28>
     e14:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__fp_nan>
     e18:	0e f4       	brtc	.+2      	; 0xe1c <__addsf3+0x28>
     e1a:	e0 95       	com	r30
     e1c:	e7 fb       	bst	r30, 7
     e1e:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>

00000e22 <__addsf3x>:
     e22:	e9 2f       	mov	r30, r25
     e24:	0e 94 3a 08 	call	0x1074	; 0x1074 <__fp_split3>
     e28:	58 f3       	brcs	.-42     	; 0xe00 <__addsf3+0xc>
     e2a:	ba 17       	cp	r27, r26
     e2c:	62 07       	cpc	r22, r18
     e2e:	73 07       	cpc	r23, r19
     e30:	84 07       	cpc	r24, r20
     e32:	95 07       	cpc	r25, r21
     e34:	20 f0       	brcs	.+8      	; 0xe3e <__addsf3x+0x1c>
     e36:	79 f4       	brne	.+30     	; 0xe56 <__addsf3x+0x34>
     e38:	a6 f5       	brtc	.+104    	; 0xea2 <__addsf3x+0x80>
     e3a:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_zero>
     e3e:	0e f4       	brtc	.+2      	; 0xe42 <__addsf3x+0x20>
     e40:	e0 95       	com	r30
     e42:	0b 2e       	mov	r0, r27
     e44:	ba 2f       	mov	r27, r26
     e46:	a0 2d       	mov	r26, r0
     e48:	0b 01       	movw	r0, r22
     e4a:	b9 01       	movw	r22, r18
     e4c:	90 01       	movw	r18, r0
     e4e:	0c 01       	movw	r0, r24
     e50:	ca 01       	movw	r24, r20
     e52:	a0 01       	movw	r20, r0
     e54:	11 24       	eor	r1, r1
     e56:	ff 27       	eor	r31, r31
     e58:	59 1b       	sub	r21, r25
     e5a:	99 f0       	breq	.+38     	; 0xe82 <__addsf3x+0x60>
     e5c:	59 3f       	cpi	r21, 0xF9	; 249
     e5e:	50 f4       	brcc	.+20     	; 0xe74 <__addsf3x+0x52>
     e60:	50 3e       	cpi	r21, 0xE0	; 224
     e62:	68 f1       	brcs	.+90     	; 0xebe <__addsf3x+0x9c>
     e64:	1a 16       	cp	r1, r26
     e66:	f0 40       	sbci	r31, 0x00	; 0
     e68:	a2 2f       	mov	r26, r18
     e6a:	23 2f       	mov	r18, r19
     e6c:	34 2f       	mov	r19, r20
     e6e:	44 27       	eor	r20, r20
     e70:	58 5f       	subi	r21, 0xF8	; 248
     e72:	f3 cf       	rjmp	.-26     	; 0xe5a <__addsf3x+0x38>
     e74:	46 95       	lsr	r20
     e76:	37 95       	ror	r19
     e78:	27 95       	ror	r18
     e7a:	a7 95       	ror	r26
     e7c:	f0 40       	sbci	r31, 0x00	; 0
     e7e:	53 95       	inc	r21
     e80:	c9 f7       	brne	.-14     	; 0xe74 <__addsf3x+0x52>
     e82:	7e f4       	brtc	.+30     	; 0xea2 <__addsf3x+0x80>
     e84:	1f 16       	cp	r1, r31
     e86:	ba 0b       	sbc	r27, r26
     e88:	62 0b       	sbc	r22, r18
     e8a:	73 0b       	sbc	r23, r19
     e8c:	84 0b       	sbc	r24, r20
     e8e:	ba f0       	brmi	.+46     	; 0xebe <__addsf3x+0x9c>
     e90:	91 50       	subi	r25, 0x01	; 1
     e92:	a1 f0       	breq	.+40     	; 0xebc <__addsf3x+0x9a>
     e94:	ff 0f       	add	r31, r31
     e96:	bb 1f       	adc	r27, r27
     e98:	66 1f       	adc	r22, r22
     e9a:	77 1f       	adc	r23, r23
     e9c:	88 1f       	adc	r24, r24
     e9e:	c2 f7       	brpl	.-16     	; 0xe90 <__addsf3x+0x6e>
     ea0:	0e c0       	rjmp	.+28     	; 0xebe <__addsf3x+0x9c>
     ea2:	ba 0f       	add	r27, r26
     ea4:	62 1f       	adc	r22, r18
     ea6:	73 1f       	adc	r23, r19
     ea8:	84 1f       	adc	r24, r20
     eaa:	48 f4       	brcc	.+18     	; 0xebe <__addsf3x+0x9c>
     eac:	87 95       	ror	r24
     eae:	77 95       	ror	r23
     eb0:	67 95       	ror	r22
     eb2:	b7 95       	ror	r27
     eb4:	f7 95       	ror	r31
     eb6:	9e 3f       	cpi	r25, 0xFE	; 254
     eb8:	08 f0       	brcs	.+2      	; 0xebc <__addsf3x+0x9a>
     eba:	b0 cf       	rjmp	.-160    	; 0xe1c <__addsf3+0x28>
     ebc:	93 95       	inc	r25
     ebe:	88 0f       	add	r24, r24
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <__addsf3x+0xa2>
     ec2:	99 27       	eor	r25, r25
     ec4:	ee 0f       	add	r30, r30
     ec6:	97 95       	ror	r25
     ec8:	87 95       	ror	r24
     eca:	08 95       	ret

00000ecc <__fixunssfsi>:
     ecc:	0e 94 42 08 	call	0x1084	; 0x1084 <__fp_splitA>
     ed0:	88 f0       	brcs	.+34     	; 0xef4 <__fixunssfsi+0x28>
     ed2:	9f 57       	subi	r25, 0x7F	; 127
     ed4:	98 f0       	brcs	.+38     	; 0xefc <__fixunssfsi+0x30>
     ed6:	b9 2f       	mov	r27, r25
     ed8:	99 27       	eor	r25, r25
     eda:	b7 51       	subi	r27, 0x17	; 23
     edc:	b0 f0       	brcs	.+44     	; 0xf0a <__fixunssfsi+0x3e>
     ede:	e1 f0       	breq	.+56     	; 0xf18 <__fixunssfsi+0x4c>
     ee0:	66 0f       	add	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	88 1f       	adc	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	1a f0       	brmi	.+6      	; 0xef0 <__fixunssfsi+0x24>
     eea:	ba 95       	dec	r27
     eec:	c9 f7       	brne	.-14     	; 0xee0 <__fixunssfsi+0x14>
     eee:	14 c0       	rjmp	.+40     	; 0xf18 <__fixunssfsi+0x4c>
     ef0:	b1 30       	cpi	r27, 0x01	; 1
     ef2:	91 f0       	breq	.+36     	; 0xf18 <__fixunssfsi+0x4c>
     ef4:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__fp_zero>
     ef8:	b1 e0       	ldi	r27, 0x01	; 1
     efa:	08 95       	ret
     efc:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_zero>
     f00:	67 2f       	mov	r22, r23
     f02:	78 2f       	mov	r23, r24
     f04:	88 27       	eor	r24, r24
     f06:	b8 5f       	subi	r27, 0xF8	; 248
     f08:	39 f0       	breq	.+14     	; 0xf18 <__fixunssfsi+0x4c>
     f0a:	b9 3f       	cpi	r27, 0xF9	; 249
     f0c:	cc f3       	brlt	.-14     	; 0xf00 <__fixunssfsi+0x34>
     f0e:	86 95       	lsr	r24
     f10:	77 95       	ror	r23
     f12:	67 95       	ror	r22
     f14:	b3 95       	inc	r27
     f16:	d9 f7       	brne	.-10     	; 0xf0e <__fixunssfsi+0x42>
     f18:	3e f4       	brtc	.+14     	; 0xf28 <__fixunssfsi+0x5c>
     f1a:	90 95       	com	r25
     f1c:	80 95       	com	r24
     f1e:	70 95       	com	r23
     f20:	61 95       	neg	r22
     f22:	7f 4f       	sbci	r23, 0xFF	; 255
     f24:	8f 4f       	sbci	r24, 0xFF	; 255
     f26:	9f 4f       	sbci	r25, 0xFF	; 255
     f28:	08 95       	ret

00000f2a <__floatunsisf>:
     f2a:	e8 94       	clt
     f2c:	09 c0       	rjmp	.+18     	; 0xf40 <__floatsisf+0x12>

00000f2e <__floatsisf>:
     f2e:	97 fb       	bst	r25, 7
     f30:	3e f4       	brtc	.+14     	; 0xf40 <__floatsisf+0x12>
     f32:	90 95       	com	r25
     f34:	80 95       	com	r24
     f36:	70 95       	com	r23
     f38:	61 95       	neg	r22
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	8f 4f       	sbci	r24, 0xFF	; 255
     f3e:	9f 4f       	sbci	r25, 0xFF	; 255
     f40:	99 23       	and	r25, r25
     f42:	a9 f0       	breq	.+42     	; 0xf6e <__floatsisf+0x40>
     f44:	f9 2f       	mov	r31, r25
     f46:	96 e9       	ldi	r25, 0x96	; 150
     f48:	bb 27       	eor	r27, r27
     f4a:	93 95       	inc	r25
     f4c:	f6 95       	lsr	r31
     f4e:	87 95       	ror	r24
     f50:	77 95       	ror	r23
     f52:	67 95       	ror	r22
     f54:	b7 95       	ror	r27
     f56:	f1 11       	cpse	r31, r1
     f58:	f8 cf       	rjmp	.-16     	; 0xf4a <__floatsisf+0x1c>
     f5a:	fa f4       	brpl	.+62     	; 0xf9a <__floatsisf+0x6c>
     f5c:	bb 0f       	add	r27, r27
     f5e:	11 f4       	brne	.+4      	; 0xf64 <__floatsisf+0x36>
     f60:	60 ff       	sbrs	r22, 0
     f62:	1b c0       	rjmp	.+54     	; 0xf9a <__floatsisf+0x6c>
     f64:	6f 5f       	subi	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8f 4f       	sbci	r24, 0xFF	; 255
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	16 c0       	rjmp	.+44     	; 0xf9a <__floatsisf+0x6c>
     f6e:	88 23       	and	r24, r24
     f70:	11 f0       	breq	.+4      	; 0xf76 <__floatsisf+0x48>
     f72:	96 e9       	ldi	r25, 0x96	; 150
     f74:	11 c0       	rjmp	.+34     	; 0xf98 <__floatsisf+0x6a>
     f76:	77 23       	and	r23, r23
     f78:	21 f0       	breq	.+8      	; 0xf82 <__floatsisf+0x54>
     f7a:	9e e8       	ldi	r25, 0x8E	; 142
     f7c:	87 2f       	mov	r24, r23
     f7e:	76 2f       	mov	r23, r22
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <__floatsisf+0x5e>
     f82:	66 23       	and	r22, r22
     f84:	71 f0       	breq	.+28     	; 0xfa2 <__floatsisf+0x74>
     f86:	96 e8       	ldi	r25, 0x86	; 134
     f88:	86 2f       	mov	r24, r22
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	2a f0       	brmi	.+10     	; 0xf9a <__floatsisf+0x6c>
     f90:	9a 95       	dec	r25
     f92:	66 0f       	add	r22, r22
     f94:	77 1f       	adc	r23, r23
     f96:	88 1f       	adc	r24, r24
     f98:	da f7       	brpl	.-10     	; 0xf90 <__floatsisf+0x62>
     f9a:	88 0f       	add	r24, r24
     f9c:	96 95       	lsr	r25
     f9e:	87 95       	ror	r24
     fa0:	97 f9       	bld	r25, 7
     fa2:	08 95       	ret

00000fa4 <floor>:
     fa4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__fp_trunc>
     fa8:	90 f0       	brcs	.+36     	; 0xfce <floor+0x2a>
     faa:	9f 37       	cpi	r25, 0x7F	; 127
     fac:	48 f4       	brcc	.+18     	; 0xfc0 <floor+0x1c>
     fae:	91 11       	cpse	r25, r1
     fb0:	16 f0       	brts	.+4      	; 0xfb6 <floor+0x12>
     fb2:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__fp_szero>
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	80 e8       	ldi	r24, 0x80	; 128
     fbc:	9f eb       	ldi	r25, 0xBF	; 191
     fbe:	08 95       	ret
     fc0:	26 f4       	brtc	.+8      	; 0xfca <floor+0x26>
     fc2:	1b 16       	cp	r1, r27
     fc4:	61 1d       	adc	r22, r1
     fc6:	71 1d       	adc	r23, r1
     fc8:	81 1d       	adc	r24, r1
     fca:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_mintl>
     fce:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__fp_mpack>

00000fd2 <__fp_inf>:
     fd2:	97 f9       	bld	r25, 7
     fd4:	9f 67       	ori	r25, 0x7F	; 127
     fd6:	80 e8       	ldi	r24, 0x80	; 128
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	08 95       	ret

00000fde <__fp_mintl>:
     fde:	88 23       	and	r24, r24
     fe0:	71 f4       	brne	.+28     	; 0xffe <__fp_mintl+0x20>
     fe2:	77 23       	and	r23, r23
     fe4:	21 f0       	breq	.+8      	; 0xfee <__fp_mintl+0x10>
     fe6:	98 50       	subi	r25, 0x08	; 8
     fe8:	87 2b       	or	r24, r23
     fea:	76 2f       	mov	r23, r22
     fec:	07 c0       	rjmp	.+14     	; 0xffc <__fp_mintl+0x1e>
     fee:	66 23       	and	r22, r22
     ff0:	11 f4       	brne	.+4      	; 0xff6 <__fp_mintl+0x18>
     ff2:	99 27       	eor	r25, r25
     ff4:	0d c0       	rjmp	.+26     	; 0x1010 <__fp_mintl+0x32>
     ff6:	90 51       	subi	r25, 0x10	; 16
     ff8:	86 2b       	or	r24, r22
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	2a f0       	brmi	.+10     	; 0x100a <__fp_mintl+0x2c>
    1000:	9a 95       	dec	r25
    1002:	66 0f       	add	r22, r22
    1004:	77 1f       	adc	r23, r23
    1006:	88 1f       	adc	r24, r24
    1008:	da f7       	brpl	.-10     	; 0x1000 <__fp_mintl+0x22>
    100a:	88 0f       	add	r24, r24
    100c:	96 95       	lsr	r25
    100e:	87 95       	ror	r24
    1010:	97 f9       	bld	r25, 7
    1012:	08 95       	ret

00001014 <__fp_mpack>:
    1014:	9f 3f       	cpi	r25, 0xFF	; 255
    1016:	31 f0       	breq	.+12     	; 0x1024 <__fp_mpack_finite+0xc>

00001018 <__fp_mpack_finite>:
    1018:	91 50       	subi	r25, 0x01	; 1
    101a:	20 f4       	brcc	.+8      	; 0x1024 <__fp_mpack_finite+0xc>
    101c:	87 95       	ror	r24
    101e:	77 95       	ror	r23
    1020:	67 95       	ror	r22
    1022:	b7 95       	ror	r27
    1024:	88 0f       	add	r24, r24
    1026:	91 1d       	adc	r25, r1
    1028:	96 95       	lsr	r25
    102a:	87 95       	ror	r24
    102c:	97 f9       	bld	r25, 7
    102e:	08 95       	ret

00001030 <__fp_nan>:
    1030:	9f ef       	ldi	r25, 0xFF	; 255
    1032:	80 ec       	ldi	r24, 0xC0	; 192
    1034:	08 95       	ret

00001036 <__fp_pscA>:
    1036:	00 24       	eor	r0, r0
    1038:	0a 94       	dec	r0
    103a:	16 16       	cp	r1, r22
    103c:	17 06       	cpc	r1, r23
    103e:	18 06       	cpc	r1, r24
    1040:	09 06       	cpc	r0, r25
    1042:	08 95       	ret

00001044 <__fp_pscB>:
    1044:	00 24       	eor	r0, r0
    1046:	0a 94       	dec	r0
    1048:	12 16       	cp	r1, r18
    104a:	13 06       	cpc	r1, r19
    104c:	14 06       	cpc	r1, r20
    104e:	05 06       	cpc	r0, r21
    1050:	08 95       	ret

00001052 <__fp_round>:
    1052:	09 2e       	mov	r0, r25
    1054:	03 94       	inc	r0
    1056:	00 0c       	add	r0, r0
    1058:	11 f4       	brne	.+4      	; 0x105e <__fp_round+0xc>
    105a:	88 23       	and	r24, r24
    105c:	52 f0       	brmi	.+20     	; 0x1072 <__fp_round+0x20>
    105e:	bb 0f       	add	r27, r27
    1060:	40 f4       	brcc	.+16     	; 0x1072 <__fp_round+0x20>
    1062:	bf 2b       	or	r27, r31
    1064:	11 f4       	brne	.+4      	; 0x106a <__fp_round+0x18>
    1066:	60 ff       	sbrs	r22, 0
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <__fp_round+0x20>
    106a:	6f 5f       	subi	r22, 0xFF	; 255
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	8f 4f       	sbci	r24, 0xFF	; 255
    1070:	9f 4f       	sbci	r25, 0xFF	; 255
    1072:	08 95       	ret

00001074 <__fp_split3>:
    1074:	57 fd       	sbrc	r21, 7
    1076:	90 58       	subi	r25, 0x80	; 128
    1078:	44 0f       	add	r20, r20
    107a:	55 1f       	adc	r21, r21
    107c:	59 f0       	breq	.+22     	; 0x1094 <__fp_splitA+0x10>
    107e:	5f 3f       	cpi	r21, 0xFF	; 255
    1080:	71 f0       	breq	.+28     	; 0x109e <__fp_splitA+0x1a>
    1082:	47 95       	ror	r20

00001084 <__fp_splitA>:
    1084:	88 0f       	add	r24, r24
    1086:	97 fb       	bst	r25, 7
    1088:	99 1f       	adc	r25, r25
    108a:	61 f0       	breq	.+24     	; 0x10a4 <__fp_splitA+0x20>
    108c:	9f 3f       	cpi	r25, 0xFF	; 255
    108e:	79 f0       	breq	.+30     	; 0x10ae <__fp_splitA+0x2a>
    1090:	87 95       	ror	r24
    1092:	08 95       	ret
    1094:	12 16       	cp	r1, r18
    1096:	13 06       	cpc	r1, r19
    1098:	14 06       	cpc	r1, r20
    109a:	55 1f       	adc	r21, r21
    109c:	f2 cf       	rjmp	.-28     	; 0x1082 <__fp_split3+0xe>
    109e:	46 95       	lsr	r20
    10a0:	f1 df       	rcall	.-30     	; 0x1084 <__fp_splitA>
    10a2:	08 c0       	rjmp	.+16     	; 0x10b4 <__fp_splitA+0x30>
    10a4:	16 16       	cp	r1, r22
    10a6:	17 06       	cpc	r1, r23
    10a8:	18 06       	cpc	r1, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	f1 cf       	rjmp	.-30     	; 0x1090 <__fp_splitA+0xc>
    10ae:	86 95       	lsr	r24
    10b0:	71 05       	cpc	r23, r1
    10b2:	61 05       	cpc	r22, r1
    10b4:	08 94       	sec
    10b6:	08 95       	ret

000010b8 <__fp_trunc>:
    10b8:	0e 94 42 08 	call	0x1084	; 0x1084 <__fp_splitA>
    10bc:	a0 f0       	brcs	.+40     	; 0x10e6 <__fp_trunc+0x2e>
    10be:	be e7       	ldi	r27, 0x7E	; 126
    10c0:	b9 17       	cp	r27, r25
    10c2:	88 f4       	brcc	.+34     	; 0x10e6 <__fp_trunc+0x2e>
    10c4:	bb 27       	eor	r27, r27
    10c6:	9f 38       	cpi	r25, 0x8F	; 143
    10c8:	60 f4       	brcc	.+24     	; 0x10e2 <__fp_trunc+0x2a>
    10ca:	16 16       	cp	r1, r22
    10cc:	b1 1d       	adc	r27, r1
    10ce:	67 2f       	mov	r22, r23
    10d0:	78 2f       	mov	r23, r24
    10d2:	88 27       	eor	r24, r24
    10d4:	98 5f       	subi	r25, 0xF8	; 248
    10d6:	f7 cf       	rjmp	.-18     	; 0x10c6 <__fp_trunc+0xe>
    10d8:	86 95       	lsr	r24
    10da:	77 95       	ror	r23
    10dc:	67 95       	ror	r22
    10de:	b1 1d       	adc	r27, r1
    10e0:	93 95       	inc	r25
    10e2:	96 39       	cpi	r25, 0x96	; 150
    10e4:	c8 f3       	brcs	.-14     	; 0x10d8 <__fp_trunc+0x20>
    10e6:	08 95       	ret

000010e8 <__fp_zero>:
    10e8:	e8 94       	clt

000010ea <__fp_szero>:
    10ea:	bb 27       	eor	r27, r27
    10ec:	66 27       	eor	r22, r22
    10ee:	77 27       	eor	r23, r23
    10f0:	cb 01       	movw	r24, r22
    10f2:	97 f9       	bld	r25, 7
    10f4:	08 95       	ret

000010f6 <log10>:
    10f6:	0e 94 8b 08 	call	0x1116	; 0x1116 <log>
    10fa:	29 ed       	ldi	r18, 0xD9	; 217
    10fc:	3b e5       	ldi	r19, 0x5B	; 91
    10fe:	4e ed       	ldi	r20, 0xDE	; 222
    1100:	5e e3       	ldi	r21, 0x3E	; 62
    1102:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__mulsf3>
    1106:	16 f0       	brts	.+4      	; 0x110c <log10+0x16>
    1108:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__fp_mpack>
    110c:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__fp_nan>
    1110:	68 94       	set
    1112:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>

00001116 <log>:
    1116:	0e 94 42 08 	call	0x1084	; 0x1084 <__fp_splitA>
    111a:	a8 f3       	brcs	.-22     	; 0x1106 <log10+0x10>
    111c:	99 23       	and	r25, r25
    111e:	c1 f3       	breq	.-16     	; 0x1110 <log10+0x1a>
    1120:	ae f3       	brts	.-22     	; 0x110c <log10+0x16>
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	1f 93       	push	r17
    1128:	0f 93       	push	r16
    112a:	ff 92       	push	r15
    112c:	c9 2f       	mov	r28, r25
    112e:	dd 27       	eor	r29, r29
    1130:	88 23       	and	r24, r24
    1132:	2a f0       	brmi	.+10     	; 0x113e <log+0x28>
    1134:	21 97       	sbiw	r28, 0x01	; 1
    1136:	66 0f       	add	r22, r22
    1138:	77 1f       	adc	r23, r23
    113a:	88 1f       	adc	r24, r24
    113c:	da f7       	brpl	.-10     	; 0x1134 <log+0x1e>
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e8       	ldi	r20, 0x80	; 128
    1144:	5f eb       	ldi	r21, 0xBF	; 191
    1146:	9f e3       	ldi	r25, 0x3F	; 63
    1148:	88 39       	cpi	r24, 0x98	; 152
    114a:	20 f0       	brcs	.+8      	; 0x1154 <log+0x3e>
    114c:	80 3e       	cpi	r24, 0xE0	; 224
    114e:	38 f0       	brcs	.+14     	; 0x115e <log+0x48>
    1150:	21 96       	adiw	r28, 0x01	; 1
    1152:	8f 77       	andi	r24, 0x7F	; 127
    1154:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__addsf3>
    1158:	e8 ec       	ldi	r30, 0xC8	; 200
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	04 c0       	rjmp	.+8      	; 0x1166 <log+0x50>
    115e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__addsf3>
    1162:	e5 ef       	ldi	r30, 0xF5	; 245
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	0e 94 40 09 	call	0x1280	; 0x1280 <__fp_powser>
    116a:	8b 01       	movw	r16, r22
    116c:	be 01       	movw	r22, r28
    116e:	ec 01       	movw	r28, r24
    1170:	fb 2e       	mov	r15, r27
    1172:	6f 57       	subi	r22, 0x7F	; 127
    1174:	71 09       	sbc	r23, r1
    1176:	75 95       	asr	r23
    1178:	77 1f       	adc	r23, r23
    117a:	88 0b       	sbc	r24, r24
    117c:	99 0b       	sbc	r25, r25
    117e:	0e 94 97 07 	call	0xf2e	; 0xf2e <__floatsisf>
    1182:	28 e1       	ldi	r18, 0x18	; 24
    1184:	32 e7       	ldi	r19, 0x72	; 114
    1186:	41 e3       	ldi	r20, 0x31	; 49
    1188:	5f e3       	ldi	r21, 0x3F	; 63
    118a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__mulsf3x>
    118e:	af 2d       	mov	r26, r15
    1190:	98 01       	movw	r18, r16
    1192:	ae 01       	movw	r20, r28
    1194:	ff 90       	pop	r15
    1196:	0f 91       	pop	r16
    1198:	1f 91       	pop	r17
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	0e 94 11 07 	call	0xe22	; 0xe22 <__addsf3x>
    11a2:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__fp_round>

000011a6 <__mulsf3>:
    11a6:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__mulsf3x>
    11aa:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__fp_round>
    11ae:	0e 94 1b 08 	call	0x1036	; 0x1036 <__fp_pscA>
    11b2:	38 f0       	brcs	.+14     	; 0x11c2 <__mulsf3+0x1c>
    11b4:	0e 94 22 08 	call	0x1044	; 0x1044 <__fp_pscB>
    11b8:	20 f0       	brcs	.+8      	; 0x11c2 <__mulsf3+0x1c>
    11ba:	95 23       	and	r25, r21
    11bc:	11 f0       	breq	.+4      	; 0x11c2 <__mulsf3+0x1c>
    11be:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>
    11c2:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__fp_nan>
    11c6:	11 24       	eor	r1, r1
    11c8:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__fp_szero>

000011cc <__mulsf3x>:
    11cc:	0e 94 3a 08 	call	0x1074	; 0x1074 <__fp_split3>
    11d0:	70 f3       	brcs	.-36     	; 0x11ae <__mulsf3+0x8>

000011d2 <__mulsf3_pse>:
    11d2:	95 9f       	mul	r25, r21
    11d4:	c1 f3       	breq	.-16     	; 0x11c6 <__mulsf3+0x20>
    11d6:	95 0f       	add	r25, r21
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	55 1f       	adc	r21, r21
    11dc:	62 9f       	mul	r22, r18
    11de:	f0 01       	movw	r30, r0
    11e0:	72 9f       	mul	r23, r18
    11e2:	bb 27       	eor	r27, r27
    11e4:	f0 0d       	add	r31, r0
    11e6:	b1 1d       	adc	r27, r1
    11e8:	63 9f       	mul	r22, r19
    11ea:	aa 27       	eor	r26, r26
    11ec:	f0 0d       	add	r31, r0
    11ee:	b1 1d       	adc	r27, r1
    11f0:	aa 1f       	adc	r26, r26
    11f2:	64 9f       	mul	r22, r20
    11f4:	66 27       	eor	r22, r22
    11f6:	b0 0d       	add	r27, r0
    11f8:	a1 1d       	adc	r26, r1
    11fa:	66 1f       	adc	r22, r22
    11fc:	82 9f       	mul	r24, r18
    11fe:	22 27       	eor	r18, r18
    1200:	b0 0d       	add	r27, r0
    1202:	a1 1d       	adc	r26, r1
    1204:	62 1f       	adc	r22, r18
    1206:	73 9f       	mul	r23, r19
    1208:	b0 0d       	add	r27, r0
    120a:	a1 1d       	adc	r26, r1
    120c:	62 1f       	adc	r22, r18
    120e:	83 9f       	mul	r24, r19
    1210:	a0 0d       	add	r26, r0
    1212:	61 1d       	adc	r22, r1
    1214:	22 1f       	adc	r18, r18
    1216:	74 9f       	mul	r23, r20
    1218:	33 27       	eor	r19, r19
    121a:	a0 0d       	add	r26, r0
    121c:	61 1d       	adc	r22, r1
    121e:	23 1f       	adc	r18, r19
    1220:	84 9f       	mul	r24, r20
    1222:	60 0d       	add	r22, r0
    1224:	21 1d       	adc	r18, r1
    1226:	82 2f       	mov	r24, r18
    1228:	76 2f       	mov	r23, r22
    122a:	6a 2f       	mov	r22, r26
    122c:	11 24       	eor	r1, r1
    122e:	9f 57       	subi	r25, 0x7F	; 127
    1230:	50 40       	sbci	r21, 0x00	; 0
    1232:	9a f0       	brmi	.+38     	; 0x125a <__mulsf3_pse+0x88>
    1234:	f1 f0       	breq	.+60     	; 0x1272 <__mulsf3_pse+0xa0>
    1236:	88 23       	and	r24, r24
    1238:	4a f0       	brmi	.+18     	; 0x124c <__mulsf3_pse+0x7a>
    123a:	ee 0f       	add	r30, r30
    123c:	ff 1f       	adc	r31, r31
    123e:	bb 1f       	adc	r27, r27
    1240:	66 1f       	adc	r22, r22
    1242:	77 1f       	adc	r23, r23
    1244:	88 1f       	adc	r24, r24
    1246:	91 50       	subi	r25, 0x01	; 1
    1248:	50 40       	sbci	r21, 0x00	; 0
    124a:	a9 f7       	brne	.-22     	; 0x1236 <__mulsf3_pse+0x64>
    124c:	9e 3f       	cpi	r25, 0xFE	; 254
    124e:	51 05       	cpc	r21, r1
    1250:	80 f0       	brcs	.+32     	; 0x1272 <__mulsf3_pse+0xa0>
    1252:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>
    1256:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__fp_szero>
    125a:	5f 3f       	cpi	r21, 0xFF	; 255
    125c:	e4 f3       	brlt	.-8      	; 0x1256 <__mulsf3_pse+0x84>
    125e:	98 3e       	cpi	r25, 0xE8	; 232
    1260:	d4 f3       	brlt	.-12     	; 0x1256 <__mulsf3_pse+0x84>
    1262:	86 95       	lsr	r24
    1264:	77 95       	ror	r23
    1266:	67 95       	ror	r22
    1268:	b7 95       	ror	r27
    126a:	f7 95       	ror	r31
    126c:	e7 95       	ror	r30
    126e:	9f 5f       	subi	r25, 0xFF	; 255
    1270:	c1 f7       	brne	.-16     	; 0x1262 <__mulsf3_pse+0x90>
    1272:	fe 2b       	or	r31, r30
    1274:	88 0f       	add	r24, r24
    1276:	91 1d       	adc	r25, r1
    1278:	96 95       	lsr	r25
    127a:	87 95       	ror	r24
    127c:	97 f9       	bld	r25, 7
    127e:	08 95       	ret

00001280 <__fp_powser>:
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	1f 93       	push	r17
    1286:	0f 93       	push	r16
    1288:	ff 92       	push	r15
    128a:	ef 92       	push	r14
    128c:	df 92       	push	r13
    128e:	7b 01       	movw	r14, r22
    1290:	8c 01       	movw	r16, r24
    1292:	68 94       	set
    1294:	06 c0       	rjmp	.+12     	; 0x12a2 <__fp_powser+0x22>
    1296:	da 2e       	mov	r13, r26
    1298:	ef 01       	movw	r28, r30
    129a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__mulsf3x>
    129e:	fe 01       	movw	r30, r28
    12a0:	e8 94       	clt
    12a2:	a5 91       	lpm	r26, Z+
    12a4:	25 91       	lpm	r18, Z+
    12a6:	35 91       	lpm	r19, Z+
    12a8:	45 91       	lpm	r20, Z+
    12aa:	55 91       	lpm	r21, Z+
    12ac:	a6 f3       	brts	.-24     	; 0x1296 <__fp_powser+0x16>
    12ae:	ef 01       	movw	r28, r30
    12b0:	0e 94 11 07 	call	0xe22	; 0xe22 <__addsf3x>
    12b4:	fe 01       	movw	r30, r28
    12b6:	97 01       	movw	r18, r14
    12b8:	a8 01       	movw	r20, r16
    12ba:	da 94       	dec	r13
    12bc:	69 f7       	brne	.-38     	; 0x1298 <__fp_powser+0x18>
    12be:	df 90       	pop	r13
    12c0:	ef 90       	pop	r14
    12c2:	ff 90       	pop	r15
    12c4:	0f 91       	pop	r16
    12c6:	1f 91       	pop	r17
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <__mulsi3>:
    12ce:	db 01       	movw	r26, r22
    12d0:	8f 93       	push	r24
    12d2:	9f 93       	push	r25
    12d4:	0e 94 9c 09 	call	0x1338	; 0x1338 <__muluhisi3>
    12d8:	bf 91       	pop	r27
    12da:	af 91       	pop	r26
    12dc:	a2 9f       	mul	r26, r18
    12de:	80 0d       	add	r24, r0
    12e0:	91 1d       	adc	r25, r1
    12e2:	a3 9f       	mul	r26, r19
    12e4:	90 0d       	add	r25, r0
    12e6:	b2 9f       	mul	r27, r18
    12e8:	90 0d       	add	r25, r0
    12ea:	11 24       	eor	r1, r1
    12ec:	08 95       	ret

000012ee <__divmodsi4>:
    12ee:	05 2e       	mov	r0, r21
    12f0:	97 fb       	bst	r25, 7
    12f2:	1e f4       	brtc	.+6      	; 0x12fa <__divmodsi4+0xc>
    12f4:	00 94       	com	r0
    12f6:	0e 94 8e 09 	call	0x131c	; 0x131c <__negsi2>
    12fa:	57 fd       	sbrc	r21, 7
    12fc:	07 d0       	rcall	.+14     	; 0x130c <__divmodsi4_neg2>
    12fe:	0e 94 a7 09 	call	0x134e	; 0x134e <__udivmodsi4>
    1302:	07 fc       	sbrc	r0, 7
    1304:	03 d0       	rcall	.+6      	; 0x130c <__divmodsi4_neg2>
    1306:	4e f4       	brtc	.+18     	; 0x131a <__divmodsi4_exit>
    1308:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__negsi2>

0000130c <__divmodsi4_neg2>:
    130c:	50 95       	com	r21
    130e:	40 95       	com	r20
    1310:	30 95       	com	r19
    1312:	21 95       	neg	r18
    1314:	3f 4f       	sbci	r19, 0xFF	; 255
    1316:	4f 4f       	sbci	r20, 0xFF	; 255
    1318:	5f 4f       	sbci	r21, 0xFF	; 255

0000131a <__divmodsi4_exit>:
    131a:	08 95       	ret

0000131c <__negsi2>:
    131c:	90 95       	com	r25
    131e:	80 95       	com	r24
    1320:	70 95       	com	r23
    1322:	61 95       	neg	r22
    1324:	7f 4f       	sbci	r23, 0xFF	; 255
    1326:	8f 4f       	sbci	r24, 0xFF	; 255
    1328:	9f 4f       	sbci	r25, 0xFF	; 255
    132a:	08 95       	ret

0000132c <__tablejump2__>:
    132c:	ee 0f       	add	r30, r30
    132e:	ff 1f       	adc	r31, r31
    1330:	05 90       	lpm	r0, Z+
    1332:	f4 91       	lpm	r31, Z
    1334:	e0 2d       	mov	r30, r0
    1336:	09 94       	ijmp

00001338 <__muluhisi3>:
    1338:	0e 94 c9 09 	call	0x1392	; 0x1392 <__umulhisi3>
    133c:	a5 9f       	mul	r26, r21
    133e:	90 0d       	add	r25, r0
    1340:	b4 9f       	mul	r27, r20
    1342:	90 0d       	add	r25, r0
    1344:	a4 9f       	mul	r26, r20
    1346:	80 0d       	add	r24, r0
    1348:	91 1d       	adc	r25, r1
    134a:	11 24       	eor	r1, r1
    134c:	08 95       	ret

0000134e <__udivmodsi4>:
    134e:	a1 e2       	ldi	r26, 0x21	; 33
    1350:	1a 2e       	mov	r1, r26
    1352:	aa 1b       	sub	r26, r26
    1354:	bb 1b       	sub	r27, r27
    1356:	fd 01       	movw	r30, r26
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <__udivmodsi4_ep>

0000135a <__udivmodsi4_loop>:
    135a:	aa 1f       	adc	r26, r26
    135c:	bb 1f       	adc	r27, r27
    135e:	ee 1f       	adc	r30, r30
    1360:	ff 1f       	adc	r31, r31
    1362:	a2 17       	cp	r26, r18
    1364:	b3 07       	cpc	r27, r19
    1366:	e4 07       	cpc	r30, r20
    1368:	f5 07       	cpc	r31, r21
    136a:	20 f0       	brcs	.+8      	; 0x1374 <__udivmodsi4_ep>
    136c:	a2 1b       	sub	r26, r18
    136e:	b3 0b       	sbc	r27, r19
    1370:	e4 0b       	sbc	r30, r20
    1372:	f5 0b       	sbc	r31, r21

00001374 <__udivmodsi4_ep>:
    1374:	66 1f       	adc	r22, r22
    1376:	77 1f       	adc	r23, r23
    1378:	88 1f       	adc	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	1a 94       	dec	r1
    137e:	69 f7       	brne	.-38     	; 0x135a <__udivmodsi4_loop>
    1380:	60 95       	com	r22
    1382:	70 95       	com	r23
    1384:	80 95       	com	r24
    1386:	90 95       	com	r25
    1388:	9b 01       	movw	r18, r22
    138a:	ac 01       	movw	r20, r24
    138c:	bd 01       	movw	r22, r26
    138e:	cf 01       	movw	r24, r30
    1390:	08 95       	ret

00001392 <__umulhisi3>:
    1392:	a2 9f       	mul	r26, r18
    1394:	b0 01       	movw	r22, r0
    1396:	b3 9f       	mul	r27, r19
    1398:	c0 01       	movw	r24, r0
    139a:	a3 9f       	mul	r26, r19
    139c:	70 0d       	add	r23, r0
    139e:	81 1d       	adc	r24, r1
    13a0:	11 24       	eor	r1, r1
    13a2:	91 1d       	adc	r25, r1
    13a4:	b2 9f       	mul	r27, r18
    13a6:	70 0d       	add	r23, r0
    13a8:	81 1d       	adc	r24, r1
    13aa:	11 24       	eor	r1, r1
    13ac:	91 1d       	adc	r25, r1
    13ae:	08 95       	ret

000013b0 <sprintf>:
    13b0:	ae e0       	ldi	r26, 0x0E	; 14
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ee ed       	ldi	r30, 0xDE	; 222
    13b6:	f9 e0       	ldi	r31, 0x09	; 9
    13b8:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__prologue_saves__+0x1c>
    13bc:	0d 89       	ldd	r16, Y+21	; 0x15
    13be:	1e 89       	ldd	r17, Y+22	; 0x16
    13c0:	86 e0       	ldi	r24, 0x06	; 6
    13c2:	8c 83       	std	Y+4, r24	; 0x04
    13c4:	1a 83       	std	Y+2, r17	; 0x02
    13c6:	09 83       	std	Y+1, r16	; 0x01
    13c8:	8f ef       	ldi	r24, 0xFF	; 255
    13ca:	9f e7       	ldi	r25, 0x7F	; 127
    13cc:	9e 83       	std	Y+6, r25	; 0x06
    13ce:	8d 83       	std	Y+5, r24	; 0x05
    13d0:	ae 01       	movw	r20, r28
    13d2:	47 5e       	subi	r20, 0xE7	; 231
    13d4:	5f 4f       	sbci	r21, 0xFF	; 255
    13d6:	6f 89       	ldd	r22, Y+23	; 0x17
    13d8:	78 8d       	ldd	r23, Y+24	; 0x18
    13da:	ce 01       	movw	r24, r28
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <vfprintf>
    13e2:	ef 81       	ldd	r30, Y+7	; 0x07
    13e4:	f8 85       	ldd	r31, Y+8	; 0x08
    13e6:	e0 0f       	add	r30, r16
    13e8:	f1 1f       	adc	r31, r17
    13ea:	10 82       	st	Z, r1
    13ec:	2e 96       	adiw	r28, 0x0e	; 14
    13ee:	e4 e0       	ldi	r30, 0x04	; 4
    13f0:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__epilogue_restores__+0x1c>

000013f4 <vfprintf>:
    13f4:	ab e0       	ldi	r26, 0x0B	; 11
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e0 e0       	ldi	r30, 0x00	; 0
    13fa:	fa e0       	ldi	r31, 0x0A	; 10
    13fc:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__prologue_saves__>
    1400:	6c 01       	movw	r12, r24
    1402:	7b 01       	movw	r14, r22
    1404:	8a 01       	movw	r16, r20
    1406:	fc 01       	movw	r30, r24
    1408:	17 82       	std	Z+7, r1	; 0x07
    140a:	16 82       	std	Z+6, r1	; 0x06
    140c:	83 81       	ldd	r24, Z+3	; 0x03
    140e:	81 ff       	sbrs	r24, 1
    1410:	cc c1       	rjmp	.+920    	; 0x17aa <vfprintf+0x3b6>
    1412:	ce 01       	movw	r24, r28
    1414:	01 96       	adiw	r24, 0x01	; 1
    1416:	3c 01       	movw	r6, r24
    1418:	f6 01       	movw	r30, r12
    141a:	93 81       	ldd	r25, Z+3	; 0x03
    141c:	f7 01       	movw	r30, r14
    141e:	93 fd       	sbrc	r25, 3
    1420:	85 91       	lpm	r24, Z+
    1422:	93 ff       	sbrs	r25, 3
    1424:	81 91       	ld	r24, Z+
    1426:	7f 01       	movw	r14, r30
    1428:	88 23       	and	r24, r24
    142a:	09 f4       	brne	.+2      	; 0x142e <vfprintf+0x3a>
    142c:	ba c1       	rjmp	.+884    	; 0x17a2 <vfprintf+0x3ae>
    142e:	85 32       	cpi	r24, 0x25	; 37
    1430:	39 f4       	brne	.+14     	; 0x1440 <vfprintf+0x4c>
    1432:	93 fd       	sbrc	r25, 3
    1434:	85 91       	lpm	r24, Z+
    1436:	93 ff       	sbrs	r25, 3
    1438:	81 91       	ld	r24, Z+
    143a:	7f 01       	movw	r14, r30
    143c:	85 32       	cpi	r24, 0x25	; 37
    143e:	29 f4       	brne	.+10     	; 0x144a <vfprintf+0x56>
    1440:	b6 01       	movw	r22, r12
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <fputc>
    1448:	e7 cf       	rjmp	.-50     	; 0x1418 <vfprintf+0x24>
    144a:	91 2c       	mov	r9, r1
    144c:	21 2c       	mov	r2, r1
    144e:	31 2c       	mov	r3, r1
    1450:	ff e1       	ldi	r31, 0x1F	; 31
    1452:	f3 15       	cp	r31, r3
    1454:	d8 f0       	brcs	.+54     	; 0x148c <vfprintf+0x98>
    1456:	8b 32       	cpi	r24, 0x2B	; 43
    1458:	79 f0       	breq	.+30     	; 0x1478 <vfprintf+0x84>
    145a:	38 f4       	brcc	.+14     	; 0x146a <vfprintf+0x76>
    145c:	80 32       	cpi	r24, 0x20	; 32
    145e:	79 f0       	breq	.+30     	; 0x147e <vfprintf+0x8a>
    1460:	83 32       	cpi	r24, 0x23	; 35
    1462:	a1 f4       	brne	.+40     	; 0x148c <vfprintf+0x98>
    1464:	23 2d       	mov	r18, r3
    1466:	20 61       	ori	r18, 0x10	; 16
    1468:	1d c0       	rjmp	.+58     	; 0x14a4 <vfprintf+0xb0>
    146a:	8d 32       	cpi	r24, 0x2D	; 45
    146c:	61 f0       	breq	.+24     	; 0x1486 <vfprintf+0x92>
    146e:	80 33       	cpi	r24, 0x30	; 48
    1470:	69 f4       	brne	.+26     	; 0x148c <vfprintf+0x98>
    1472:	23 2d       	mov	r18, r3
    1474:	21 60       	ori	r18, 0x01	; 1
    1476:	16 c0       	rjmp	.+44     	; 0x14a4 <vfprintf+0xb0>
    1478:	83 2d       	mov	r24, r3
    147a:	82 60       	ori	r24, 0x02	; 2
    147c:	38 2e       	mov	r3, r24
    147e:	e3 2d       	mov	r30, r3
    1480:	e4 60       	ori	r30, 0x04	; 4
    1482:	3e 2e       	mov	r3, r30
    1484:	2a c0       	rjmp	.+84     	; 0x14da <vfprintf+0xe6>
    1486:	f3 2d       	mov	r31, r3
    1488:	f8 60       	ori	r31, 0x08	; 8
    148a:	1d c0       	rjmp	.+58     	; 0x14c6 <vfprintf+0xd2>
    148c:	37 fc       	sbrc	r3, 7
    148e:	2d c0       	rjmp	.+90     	; 0x14ea <vfprintf+0xf6>
    1490:	20 ed       	ldi	r18, 0xD0	; 208
    1492:	28 0f       	add	r18, r24
    1494:	2a 30       	cpi	r18, 0x0A	; 10
    1496:	40 f0       	brcs	.+16     	; 0x14a8 <vfprintf+0xb4>
    1498:	8e 32       	cpi	r24, 0x2E	; 46
    149a:	b9 f4       	brne	.+46     	; 0x14ca <vfprintf+0xd6>
    149c:	36 fc       	sbrc	r3, 6
    149e:	81 c1       	rjmp	.+770    	; 0x17a2 <vfprintf+0x3ae>
    14a0:	23 2d       	mov	r18, r3
    14a2:	20 64       	ori	r18, 0x40	; 64
    14a4:	32 2e       	mov	r3, r18
    14a6:	19 c0       	rjmp	.+50     	; 0x14da <vfprintf+0xe6>
    14a8:	36 fe       	sbrs	r3, 6
    14aa:	06 c0       	rjmp	.+12     	; 0x14b8 <vfprintf+0xc4>
    14ac:	8a e0       	ldi	r24, 0x0A	; 10
    14ae:	98 9e       	mul	r9, r24
    14b0:	20 0d       	add	r18, r0
    14b2:	11 24       	eor	r1, r1
    14b4:	92 2e       	mov	r9, r18
    14b6:	11 c0       	rjmp	.+34     	; 0x14da <vfprintf+0xe6>
    14b8:	ea e0       	ldi	r30, 0x0A	; 10
    14ba:	2e 9e       	mul	r2, r30
    14bc:	20 0d       	add	r18, r0
    14be:	11 24       	eor	r1, r1
    14c0:	22 2e       	mov	r2, r18
    14c2:	f3 2d       	mov	r31, r3
    14c4:	f0 62       	ori	r31, 0x20	; 32
    14c6:	3f 2e       	mov	r3, r31
    14c8:	08 c0       	rjmp	.+16     	; 0x14da <vfprintf+0xe6>
    14ca:	8c 36       	cpi	r24, 0x6C	; 108
    14cc:	21 f4       	brne	.+8      	; 0x14d6 <vfprintf+0xe2>
    14ce:	83 2d       	mov	r24, r3
    14d0:	80 68       	ori	r24, 0x80	; 128
    14d2:	38 2e       	mov	r3, r24
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <vfprintf+0xe6>
    14d6:	88 36       	cpi	r24, 0x68	; 104
    14d8:	41 f4       	brne	.+16     	; 0x14ea <vfprintf+0xf6>
    14da:	f7 01       	movw	r30, r14
    14dc:	93 fd       	sbrc	r25, 3
    14de:	85 91       	lpm	r24, Z+
    14e0:	93 ff       	sbrs	r25, 3
    14e2:	81 91       	ld	r24, Z+
    14e4:	7f 01       	movw	r14, r30
    14e6:	81 11       	cpse	r24, r1
    14e8:	b3 cf       	rjmp	.-154    	; 0x1450 <vfprintf+0x5c>
    14ea:	98 2f       	mov	r25, r24
    14ec:	9f 7d       	andi	r25, 0xDF	; 223
    14ee:	95 54       	subi	r25, 0x45	; 69
    14f0:	93 30       	cpi	r25, 0x03	; 3
    14f2:	28 f4       	brcc	.+10     	; 0x14fe <vfprintf+0x10a>
    14f4:	0c 5f       	subi	r16, 0xFC	; 252
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
    14f8:	9f e3       	ldi	r25, 0x3F	; 63
    14fa:	99 83       	std	Y+1, r25	; 0x01
    14fc:	0d c0       	rjmp	.+26     	; 0x1518 <vfprintf+0x124>
    14fe:	83 36       	cpi	r24, 0x63	; 99
    1500:	31 f0       	breq	.+12     	; 0x150e <vfprintf+0x11a>
    1502:	83 37       	cpi	r24, 0x73	; 115
    1504:	71 f0       	breq	.+28     	; 0x1522 <vfprintf+0x12e>
    1506:	83 35       	cpi	r24, 0x53	; 83
    1508:	09 f0       	breq	.+2      	; 0x150c <vfprintf+0x118>
    150a:	59 c0       	rjmp	.+178    	; 0x15be <vfprintf+0x1ca>
    150c:	21 c0       	rjmp	.+66     	; 0x1550 <vfprintf+0x15c>
    150e:	f8 01       	movw	r30, r16
    1510:	80 81       	ld	r24, Z
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	0e 5f       	subi	r16, 0xFE	; 254
    1516:	1f 4f       	sbci	r17, 0xFF	; 255
    1518:	88 24       	eor	r8, r8
    151a:	83 94       	inc	r8
    151c:	91 2c       	mov	r9, r1
    151e:	53 01       	movw	r10, r6
    1520:	13 c0       	rjmp	.+38     	; 0x1548 <vfprintf+0x154>
    1522:	28 01       	movw	r4, r16
    1524:	f2 e0       	ldi	r31, 0x02	; 2
    1526:	4f 0e       	add	r4, r31
    1528:	51 1c       	adc	r5, r1
    152a:	f8 01       	movw	r30, r16
    152c:	a0 80       	ld	r10, Z
    152e:	b1 80       	ldd	r11, Z+1	; 0x01
    1530:	36 fe       	sbrs	r3, 6
    1532:	03 c0       	rjmp	.+6      	; 0x153a <vfprintf+0x146>
    1534:	69 2d       	mov	r22, r9
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	02 c0       	rjmp	.+4      	; 0x153e <vfprintf+0x14a>
    153a:	6f ef       	ldi	r22, 0xFF	; 255
    153c:	7f ef       	ldi	r23, 0xFF	; 255
    153e:	c5 01       	movw	r24, r10
    1540:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <strnlen>
    1544:	4c 01       	movw	r8, r24
    1546:	82 01       	movw	r16, r4
    1548:	f3 2d       	mov	r31, r3
    154a:	ff 77       	andi	r31, 0x7F	; 127
    154c:	3f 2e       	mov	r3, r31
    154e:	16 c0       	rjmp	.+44     	; 0x157c <vfprintf+0x188>
    1550:	28 01       	movw	r4, r16
    1552:	22 e0       	ldi	r18, 0x02	; 2
    1554:	42 0e       	add	r4, r18
    1556:	51 1c       	adc	r5, r1
    1558:	f8 01       	movw	r30, r16
    155a:	a0 80       	ld	r10, Z
    155c:	b1 80       	ldd	r11, Z+1	; 0x01
    155e:	36 fe       	sbrs	r3, 6
    1560:	03 c0       	rjmp	.+6      	; 0x1568 <vfprintf+0x174>
    1562:	69 2d       	mov	r22, r9
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	02 c0       	rjmp	.+4      	; 0x156c <vfprintf+0x178>
    1568:	6f ef       	ldi	r22, 0xFF	; 255
    156a:	7f ef       	ldi	r23, 0xFF	; 255
    156c:	c5 01       	movw	r24, r10
    156e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <strnlen_P>
    1572:	4c 01       	movw	r8, r24
    1574:	f3 2d       	mov	r31, r3
    1576:	f0 68       	ori	r31, 0x80	; 128
    1578:	3f 2e       	mov	r3, r31
    157a:	82 01       	movw	r16, r4
    157c:	33 fc       	sbrc	r3, 3
    157e:	1b c0       	rjmp	.+54     	; 0x15b6 <vfprintf+0x1c2>
    1580:	82 2d       	mov	r24, r2
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	88 16       	cp	r8, r24
    1586:	99 06       	cpc	r9, r25
    1588:	b0 f4       	brcc	.+44     	; 0x15b6 <vfprintf+0x1c2>
    158a:	b6 01       	movw	r22, r12
    158c:	80 e2       	ldi	r24, 0x20	; 32
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <fputc>
    1594:	2a 94       	dec	r2
    1596:	f4 cf       	rjmp	.-24     	; 0x1580 <vfprintf+0x18c>
    1598:	f5 01       	movw	r30, r10
    159a:	37 fc       	sbrc	r3, 7
    159c:	85 91       	lpm	r24, Z+
    159e:	37 fe       	sbrs	r3, 7
    15a0:	81 91       	ld	r24, Z+
    15a2:	5f 01       	movw	r10, r30
    15a4:	b6 01       	movw	r22, r12
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <fputc>
    15ac:	21 10       	cpse	r2, r1
    15ae:	2a 94       	dec	r2
    15b0:	21 e0       	ldi	r18, 0x01	; 1
    15b2:	82 1a       	sub	r8, r18
    15b4:	91 08       	sbc	r9, r1
    15b6:	81 14       	cp	r8, r1
    15b8:	91 04       	cpc	r9, r1
    15ba:	71 f7       	brne	.-36     	; 0x1598 <vfprintf+0x1a4>
    15bc:	e8 c0       	rjmp	.+464    	; 0x178e <vfprintf+0x39a>
    15be:	84 36       	cpi	r24, 0x64	; 100
    15c0:	11 f0       	breq	.+4      	; 0x15c6 <vfprintf+0x1d2>
    15c2:	89 36       	cpi	r24, 0x69	; 105
    15c4:	41 f5       	brne	.+80     	; 0x1616 <vfprintf+0x222>
    15c6:	f8 01       	movw	r30, r16
    15c8:	37 fe       	sbrs	r3, 7
    15ca:	07 c0       	rjmp	.+14     	; 0x15da <vfprintf+0x1e6>
    15cc:	60 81       	ld	r22, Z
    15ce:	71 81       	ldd	r23, Z+1	; 0x01
    15d0:	82 81       	ldd	r24, Z+2	; 0x02
    15d2:	93 81       	ldd	r25, Z+3	; 0x03
    15d4:	0c 5f       	subi	r16, 0xFC	; 252
    15d6:	1f 4f       	sbci	r17, 0xFF	; 255
    15d8:	08 c0       	rjmp	.+16     	; 0x15ea <vfprintf+0x1f6>
    15da:	60 81       	ld	r22, Z
    15dc:	71 81       	ldd	r23, Z+1	; 0x01
    15de:	07 2e       	mov	r0, r23
    15e0:	00 0c       	add	r0, r0
    15e2:	88 0b       	sbc	r24, r24
    15e4:	99 0b       	sbc	r25, r25
    15e6:	0e 5f       	subi	r16, 0xFE	; 254
    15e8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ea:	f3 2d       	mov	r31, r3
    15ec:	ff 76       	andi	r31, 0x6F	; 111
    15ee:	3f 2e       	mov	r3, r31
    15f0:	97 ff       	sbrs	r25, 7
    15f2:	09 c0       	rjmp	.+18     	; 0x1606 <vfprintf+0x212>
    15f4:	90 95       	com	r25
    15f6:	80 95       	com	r24
    15f8:	70 95       	com	r23
    15fa:	61 95       	neg	r22
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
    1602:	f0 68       	ori	r31, 0x80	; 128
    1604:	3f 2e       	mov	r3, r31
    1606:	2a e0       	ldi	r18, 0x0A	; 10
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	a3 01       	movw	r20, r6
    160c:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ultoa_invert>
    1610:	88 2e       	mov	r8, r24
    1612:	86 18       	sub	r8, r6
    1614:	45 c0       	rjmp	.+138    	; 0x16a0 <vfprintf+0x2ac>
    1616:	85 37       	cpi	r24, 0x75	; 117
    1618:	31 f4       	brne	.+12     	; 0x1626 <vfprintf+0x232>
    161a:	23 2d       	mov	r18, r3
    161c:	2f 7e       	andi	r18, 0xEF	; 239
    161e:	b2 2e       	mov	r11, r18
    1620:	2a e0       	ldi	r18, 0x0A	; 10
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	25 c0       	rjmp	.+74     	; 0x1670 <vfprintf+0x27c>
    1626:	93 2d       	mov	r25, r3
    1628:	99 7f       	andi	r25, 0xF9	; 249
    162a:	b9 2e       	mov	r11, r25
    162c:	8f 36       	cpi	r24, 0x6F	; 111
    162e:	c1 f0       	breq	.+48     	; 0x1660 <vfprintf+0x26c>
    1630:	18 f4       	brcc	.+6      	; 0x1638 <vfprintf+0x244>
    1632:	88 35       	cpi	r24, 0x58	; 88
    1634:	79 f0       	breq	.+30     	; 0x1654 <vfprintf+0x260>
    1636:	b5 c0       	rjmp	.+362    	; 0x17a2 <vfprintf+0x3ae>
    1638:	80 37       	cpi	r24, 0x70	; 112
    163a:	19 f0       	breq	.+6      	; 0x1642 <vfprintf+0x24e>
    163c:	88 37       	cpi	r24, 0x78	; 120
    163e:	21 f0       	breq	.+8      	; 0x1648 <vfprintf+0x254>
    1640:	b0 c0       	rjmp	.+352    	; 0x17a2 <vfprintf+0x3ae>
    1642:	e9 2f       	mov	r30, r25
    1644:	e0 61       	ori	r30, 0x10	; 16
    1646:	be 2e       	mov	r11, r30
    1648:	b4 fe       	sbrs	r11, 4
    164a:	0d c0       	rjmp	.+26     	; 0x1666 <vfprintf+0x272>
    164c:	fb 2d       	mov	r31, r11
    164e:	f4 60       	ori	r31, 0x04	; 4
    1650:	bf 2e       	mov	r11, r31
    1652:	09 c0       	rjmp	.+18     	; 0x1666 <vfprintf+0x272>
    1654:	34 fe       	sbrs	r3, 4
    1656:	0a c0       	rjmp	.+20     	; 0x166c <vfprintf+0x278>
    1658:	29 2f       	mov	r18, r25
    165a:	26 60       	ori	r18, 0x06	; 6
    165c:	b2 2e       	mov	r11, r18
    165e:	06 c0       	rjmp	.+12     	; 0x166c <vfprintf+0x278>
    1660:	28 e0       	ldi	r18, 0x08	; 8
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	05 c0       	rjmp	.+10     	; 0x1670 <vfprintf+0x27c>
    1666:	20 e1       	ldi	r18, 0x10	; 16
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <vfprintf+0x27c>
    166c:	20 e1       	ldi	r18, 0x10	; 16
    166e:	32 e0       	ldi	r19, 0x02	; 2
    1670:	f8 01       	movw	r30, r16
    1672:	b7 fe       	sbrs	r11, 7
    1674:	07 c0       	rjmp	.+14     	; 0x1684 <vfprintf+0x290>
    1676:	60 81       	ld	r22, Z
    1678:	71 81       	ldd	r23, Z+1	; 0x01
    167a:	82 81       	ldd	r24, Z+2	; 0x02
    167c:	93 81       	ldd	r25, Z+3	; 0x03
    167e:	0c 5f       	subi	r16, 0xFC	; 252
    1680:	1f 4f       	sbci	r17, 0xFF	; 255
    1682:	06 c0       	rjmp	.+12     	; 0x1690 <vfprintf+0x29c>
    1684:	60 81       	ld	r22, Z
    1686:	71 81       	ldd	r23, Z+1	; 0x01
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 5f       	subi	r16, 0xFE	; 254
    168e:	1f 4f       	sbci	r17, 0xFF	; 255
    1690:	a3 01       	movw	r20, r6
    1692:	0e 94 2d 0c 	call	0x185a	; 0x185a <__ultoa_invert>
    1696:	88 2e       	mov	r8, r24
    1698:	86 18       	sub	r8, r6
    169a:	fb 2d       	mov	r31, r11
    169c:	ff 77       	andi	r31, 0x7F	; 127
    169e:	3f 2e       	mov	r3, r31
    16a0:	36 fe       	sbrs	r3, 6
    16a2:	0d c0       	rjmp	.+26     	; 0x16be <vfprintf+0x2ca>
    16a4:	23 2d       	mov	r18, r3
    16a6:	2e 7f       	andi	r18, 0xFE	; 254
    16a8:	a2 2e       	mov	r10, r18
    16aa:	89 14       	cp	r8, r9
    16ac:	58 f4       	brcc	.+22     	; 0x16c4 <vfprintf+0x2d0>
    16ae:	34 fe       	sbrs	r3, 4
    16b0:	0b c0       	rjmp	.+22     	; 0x16c8 <vfprintf+0x2d4>
    16b2:	32 fc       	sbrc	r3, 2
    16b4:	09 c0       	rjmp	.+18     	; 0x16c8 <vfprintf+0x2d4>
    16b6:	83 2d       	mov	r24, r3
    16b8:	8e 7e       	andi	r24, 0xEE	; 238
    16ba:	a8 2e       	mov	r10, r24
    16bc:	05 c0       	rjmp	.+10     	; 0x16c8 <vfprintf+0x2d4>
    16be:	b8 2c       	mov	r11, r8
    16c0:	a3 2c       	mov	r10, r3
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <vfprintf+0x2d6>
    16c4:	b8 2c       	mov	r11, r8
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <vfprintf+0x2d6>
    16c8:	b9 2c       	mov	r11, r9
    16ca:	a4 fe       	sbrs	r10, 4
    16cc:	0f c0       	rjmp	.+30     	; 0x16ec <vfprintf+0x2f8>
    16ce:	fe 01       	movw	r30, r28
    16d0:	e8 0d       	add	r30, r8
    16d2:	f1 1d       	adc	r31, r1
    16d4:	80 81       	ld	r24, Z
    16d6:	80 33       	cpi	r24, 0x30	; 48
    16d8:	21 f4       	brne	.+8      	; 0x16e2 <vfprintf+0x2ee>
    16da:	9a 2d       	mov	r25, r10
    16dc:	99 7e       	andi	r25, 0xE9	; 233
    16de:	a9 2e       	mov	r10, r25
    16e0:	09 c0       	rjmp	.+18     	; 0x16f4 <vfprintf+0x300>
    16e2:	a2 fe       	sbrs	r10, 2
    16e4:	06 c0       	rjmp	.+12     	; 0x16f2 <vfprintf+0x2fe>
    16e6:	b3 94       	inc	r11
    16e8:	b3 94       	inc	r11
    16ea:	04 c0       	rjmp	.+8      	; 0x16f4 <vfprintf+0x300>
    16ec:	8a 2d       	mov	r24, r10
    16ee:	86 78       	andi	r24, 0x86	; 134
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <vfprintf+0x300>
    16f2:	b3 94       	inc	r11
    16f4:	a3 fc       	sbrc	r10, 3
    16f6:	11 c0       	rjmp	.+34     	; 0x171a <vfprintf+0x326>
    16f8:	a0 fe       	sbrs	r10, 0
    16fa:	06 c0       	rjmp	.+12     	; 0x1708 <vfprintf+0x314>
    16fc:	b2 14       	cp	r11, r2
    16fe:	88 f4       	brcc	.+34     	; 0x1722 <vfprintf+0x32e>
    1700:	28 0c       	add	r2, r8
    1702:	92 2c       	mov	r9, r2
    1704:	9b 18       	sub	r9, r11
    1706:	0e c0       	rjmp	.+28     	; 0x1724 <vfprintf+0x330>
    1708:	b2 14       	cp	r11, r2
    170a:	60 f4       	brcc	.+24     	; 0x1724 <vfprintf+0x330>
    170c:	b6 01       	movw	r22, r12
    170e:	80 e2       	ldi	r24, 0x20	; 32
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <fputc>
    1716:	b3 94       	inc	r11
    1718:	f7 cf       	rjmp	.-18     	; 0x1708 <vfprintf+0x314>
    171a:	b2 14       	cp	r11, r2
    171c:	18 f4       	brcc	.+6      	; 0x1724 <vfprintf+0x330>
    171e:	2b 18       	sub	r2, r11
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <vfprintf+0x332>
    1722:	98 2c       	mov	r9, r8
    1724:	21 2c       	mov	r2, r1
    1726:	a4 fe       	sbrs	r10, 4
    1728:	10 c0       	rjmp	.+32     	; 0x174a <vfprintf+0x356>
    172a:	b6 01       	movw	r22, r12
    172c:	80 e3       	ldi	r24, 0x30	; 48
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <fputc>
    1734:	a2 fe       	sbrs	r10, 2
    1736:	17 c0       	rjmp	.+46     	; 0x1766 <vfprintf+0x372>
    1738:	a1 fc       	sbrc	r10, 1
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <vfprintf+0x34e>
    173c:	88 e7       	ldi	r24, 0x78	; 120
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <vfprintf+0x352>
    1742:	88 e5       	ldi	r24, 0x58	; 88
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	b6 01       	movw	r22, r12
    1748:	0c c0       	rjmp	.+24     	; 0x1762 <vfprintf+0x36e>
    174a:	8a 2d       	mov	r24, r10
    174c:	86 78       	andi	r24, 0x86	; 134
    174e:	59 f0       	breq	.+22     	; 0x1766 <vfprintf+0x372>
    1750:	a1 fe       	sbrs	r10, 1
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <vfprintf+0x364>
    1754:	8b e2       	ldi	r24, 0x2B	; 43
    1756:	01 c0       	rjmp	.+2      	; 0x175a <vfprintf+0x366>
    1758:	80 e2       	ldi	r24, 0x20	; 32
    175a:	a7 fc       	sbrc	r10, 7
    175c:	8d e2       	ldi	r24, 0x2D	; 45
    175e:	b6 01       	movw	r22, r12
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <fputc>
    1766:	89 14       	cp	r8, r9
    1768:	38 f4       	brcc	.+14     	; 0x1778 <vfprintf+0x384>
    176a:	b6 01       	movw	r22, r12
    176c:	80 e3       	ldi	r24, 0x30	; 48
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <fputc>
    1774:	9a 94       	dec	r9
    1776:	f7 cf       	rjmp	.-18     	; 0x1766 <vfprintf+0x372>
    1778:	8a 94       	dec	r8
    177a:	f3 01       	movw	r30, r6
    177c:	e8 0d       	add	r30, r8
    177e:	f1 1d       	adc	r31, r1
    1780:	80 81       	ld	r24, Z
    1782:	b6 01       	movw	r22, r12
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <fputc>
    178a:	81 10       	cpse	r8, r1
    178c:	f5 cf       	rjmp	.-22     	; 0x1778 <vfprintf+0x384>
    178e:	22 20       	and	r2, r2
    1790:	09 f4       	brne	.+2      	; 0x1794 <vfprintf+0x3a0>
    1792:	42 ce       	rjmp	.-892    	; 0x1418 <vfprintf+0x24>
    1794:	b6 01       	movw	r22, r12
    1796:	80 e2       	ldi	r24, 0x20	; 32
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <fputc>
    179e:	2a 94       	dec	r2
    17a0:	f6 cf       	rjmp	.-20     	; 0x178e <vfprintf+0x39a>
    17a2:	f6 01       	movw	r30, r12
    17a4:	86 81       	ldd	r24, Z+6	; 0x06
    17a6:	97 81       	ldd	r25, Z+7	; 0x07
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <vfprintf+0x3ba>
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	9f ef       	ldi	r25, 0xFF	; 255
    17ae:	2b 96       	adiw	r28, 0x0b	; 11
    17b0:	e2 e1       	ldi	r30, 0x12	; 18
    17b2:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__epilogue_restores__>

000017b6 <strnlen_P>:
    17b6:	fc 01       	movw	r30, r24
    17b8:	05 90       	lpm	r0, Z+
    17ba:	61 50       	subi	r22, 0x01	; 1
    17bc:	70 40       	sbci	r23, 0x00	; 0
    17be:	01 10       	cpse	r0, r1
    17c0:	d8 f7       	brcc	.-10     	; 0x17b8 <strnlen_P+0x2>
    17c2:	80 95       	com	r24
    17c4:	90 95       	com	r25
    17c6:	8e 0f       	add	r24, r30
    17c8:	9f 1f       	adc	r25, r31
    17ca:	08 95       	ret

000017cc <strnlen>:
    17cc:	fc 01       	movw	r30, r24
    17ce:	61 50       	subi	r22, 0x01	; 1
    17d0:	70 40       	sbci	r23, 0x00	; 0
    17d2:	01 90       	ld	r0, Z+
    17d4:	01 10       	cpse	r0, r1
    17d6:	d8 f7       	brcc	.-10     	; 0x17ce <strnlen+0x2>
    17d8:	80 95       	com	r24
    17da:	90 95       	com	r25
    17dc:	8e 0f       	add	r24, r30
    17de:	9f 1f       	adc	r25, r31
    17e0:	08 95       	ret

000017e2 <fputc>:
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	fb 01       	movw	r30, r22
    17ec:	23 81       	ldd	r18, Z+3	; 0x03
    17ee:	21 fd       	sbrc	r18, 1
    17f0:	03 c0       	rjmp	.+6      	; 0x17f8 <fputc+0x16>
    17f2:	8f ef       	ldi	r24, 0xFF	; 255
    17f4:	9f ef       	ldi	r25, 0xFF	; 255
    17f6:	2c c0       	rjmp	.+88     	; 0x1850 <fputc+0x6e>
    17f8:	22 ff       	sbrs	r18, 2
    17fa:	16 c0       	rjmp	.+44     	; 0x1828 <fputc+0x46>
    17fc:	46 81       	ldd	r20, Z+6	; 0x06
    17fe:	57 81       	ldd	r21, Z+7	; 0x07
    1800:	24 81       	ldd	r18, Z+4	; 0x04
    1802:	35 81       	ldd	r19, Z+5	; 0x05
    1804:	42 17       	cp	r20, r18
    1806:	53 07       	cpc	r21, r19
    1808:	44 f4       	brge	.+16     	; 0x181a <fputc+0x38>
    180a:	a0 81       	ld	r26, Z
    180c:	b1 81       	ldd	r27, Z+1	; 0x01
    180e:	9d 01       	movw	r18, r26
    1810:	2f 5f       	subi	r18, 0xFF	; 255
    1812:	3f 4f       	sbci	r19, 0xFF	; 255
    1814:	31 83       	std	Z+1, r19	; 0x01
    1816:	20 83       	st	Z, r18
    1818:	8c 93       	st	X, r24
    181a:	26 81       	ldd	r18, Z+6	; 0x06
    181c:	37 81       	ldd	r19, Z+7	; 0x07
    181e:	2f 5f       	subi	r18, 0xFF	; 255
    1820:	3f 4f       	sbci	r19, 0xFF	; 255
    1822:	37 83       	std	Z+7, r19	; 0x07
    1824:	26 83       	std	Z+6, r18	; 0x06
    1826:	14 c0       	rjmp	.+40     	; 0x1850 <fputc+0x6e>
    1828:	8b 01       	movw	r16, r22
    182a:	ec 01       	movw	r28, r24
    182c:	fb 01       	movw	r30, r22
    182e:	00 84       	ldd	r0, Z+8	; 0x08
    1830:	f1 85       	ldd	r31, Z+9	; 0x09
    1832:	e0 2d       	mov	r30, r0
    1834:	09 95       	icall
    1836:	89 2b       	or	r24, r25
    1838:	e1 f6       	brne	.-72     	; 0x17f2 <fputc+0x10>
    183a:	d8 01       	movw	r26, r16
    183c:	16 96       	adiw	r26, 0x06	; 6
    183e:	8d 91       	ld	r24, X+
    1840:	9c 91       	ld	r25, X
    1842:	17 97       	sbiw	r26, 0x07	; 7
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	17 96       	adiw	r26, 0x07	; 7
    1848:	9c 93       	st	X, r25
    184a:	8e 93       	st	-X, r24
    184c:	16 97       	sbiw	r26, 0x06	; 6
    184e:	ce 01       	movw	r24, r28
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	08 95       	ret

0000185a <__ultoa_invert>:
    185a:	fa 01       	movw	r30, r20
    185c:	aa 27       	eor	r26, r26
    185e:	28 30       	cpi	r18, 0x08	; 8
    1860:	51 f1       	breq	.+84     	; 0x18b6 <__ultoa_invert+0x5c>
    1862:	20 31       	cpi	r18, 0x10	; 16
    1864:	81 f1       	breq	.+96     	; 0x18c6 <__ultoa_invert+0x6c>
    1866:	e8 94       	clt
    1868:	6f 93       	push	r22
    186a:	6e 7f       	andi	r22, 0xFE	; 254
    186c:	6e 5f       	subi	r22, 0xFE	; 254
    186e:	7f 4f       	sbci	r23, 0xFF	; 255
    1870:	8f 4f       	sbci	r24, 0xFF	; 255
    1872:	9f 4f       	sbci	r25, 0xFF	; 255
    1874:	af 4f       	sbci	r26, 0xFF	; 255
    1876:	b1 e0       	ldi	r27, 0x01	; 1
    1878:	3e d0       	rcall	.+124    	; 0x18f6 <__ultoa_invert+0x9c>
    187a:	b4 e0       	ldi	r27, 0x04	; 4
    187c:	3c d0       	rcall	.+120    	; 0x18f6 <__ultoa_invert+0x9c>
    187e:	67 0f       	add	r22, r23
    1880:	78 1f       	adc	r23, r24
    1882:	89 1f       	adc	r24, r25
    1884:	9a 1f       	adc	r25, r26
    1886:	a1 1d       	adc	r26, r1
    1888:	68 0f       	add	r22, r24
    188a:	79 1f       	adc	r23, r25
    188c:	8a 1f       	adc	r24, r26
    188e:	91 1d       	adc	r25, r1
    1890:	a1 1d       	adc	r26, r1
    1892:	6a 0f       	add	r22, r26
    1894:	71 1d       	adc	r23, r1
    1896:	81 1d       	adc	r24, r1
    1898:	91 1d       	adc	r25, r1
    189a:	a1 1d       	adc	r26, r1
    189c:	20 d0       	rcall	.+64     	; 0x18de <__ultoa_invert+0x84>
    189e:	09 f4       	brne	.+2      	; 0x18a2 <__ultoa_invert+0x48>
    18a0:	68 94       	set
    18a2:	3f 91       	pop	r19
    18a4:	2a e0       	ldi	r18, 0x0A	; 10
    18a6:	26 9f       	mul	r18, r22
    18a8:	11 24       	eor	r1, r1
    18aa:	30 19       	sub	r19, r0
    18ac:	30 5d       	subi	r19, 0xD0	; 208
    18ae:	31 93       	st	Z+, r19
    18b0:	de f6       	brtc	.-74     	; 0x1868 <__ultoa_invert+0xe>
    18b2:	cf 01       	movw	r24, r30
    18b4:	08 95       	ret
    18b6:	46 2f       	mov	r20, r22
    18b8:	47 70       	andi	r20, 0x07	; 7
    18ba:	40 5d       	subi	r20, 0xD0	; 208
    18bc:	41 93       	st	Z+, r20
    18be:	b3 e0       	ldi	r27, 0x03	; 3
    18c0:	0f d0       	rcall	.+30     	; 0x18e0 <__ultoa_invert+0x86>
    18c2:	c9 f7       	brne	.-14     	; 0x18b6 <__ultoa_invert+0x5c>
    18c4:	f6 cf       	rjmp	.-20     	; 0x18b2 <__ultoa_invert+0x58>
    18c6:	46 2f       	mov	r20, r22
    18c8:	4f 70       	andi	r20, 0x0F	; 15
    18ca:	40 5d       	subi	r20, 0xD0	; 208
    18cc:	4a 33       	cpi	r20, 0x3A	; 58
    18ce:	18 f0       	brcs	.+6      	; 0x18d6 <__ultoa_invert+0x7c>
    18d0:	49 5d       	subi	r20, 0xD9	; 217
    18d2:	31 fd       	sbrc	r19, 1
    18d4:	40 52       	subi	r20, 0x20	; 32
    18d6:	41 93       	st	Z+, r20
    18d8:	02 d0       	rcall	.+4      	; 0x18de <__ultoa_invert+0x84>
    18da:	a9 f7       	brne	.-22     	; 0x18c6 <__ultoa_invert+0x6c>
    18dc:	ea cf       	rjmp	.-44     	; 0x18b2 <__ultoa_invert+0x58>
    18de:	b4 e0       	ldi	r27, 0x04	; 4
    18e0:	a6 95       	lsr	r26
    18e2:	97 95       	ror	r25
    18e4:	87 95       	ror	r24
    18e6:	77 95       	ror	r23
    18e8:	67 95       	ror	r22
    18ea:	ba 95       	dec	r27
    18ec:	c9 f7       	brne	.-14     	; 0x18e0 <__ultoa_invert+0x86>
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	61 05       	cpc	r22, r1
    18f2:	71 05       	cpc	r23, r1
    18f4:	08 95       	ret
    18f6:	9b 01       	movw	r18, r22
    18f8:	ac 01       	movw	r20, r24
    18fa:	0a 2e       	mov	r0, r26
    18fc:	06 94       	lsr	r0
    18fe:	57 95       	ror	r21
    1900:	47 95       	ror	r20
    1902:	37 95       	ror	r19
    1904:	27 95       	ror	r18
    1906:	ba 95       	dec	r27
    1908:	c9 f7       	brne	.-14     	; 0x18fc <__ultoa_invert+0xa2>
    190a:	62 0f       	add	r22, r18
    190c:	73 1f       	adc	r23, r19
    190e:	84 1f       	adc	r24, r20
    1910:	95 1f       	adc	r25, r21
    1912:	a0 1d       	adc	r26, r0
    1914:	08 95       	ret

00001916 <__prologue_saves__>:
    1916:	2f 92       	push	r2
    1918:	3f 92       	push	r3
    191a:	4f 92       	push	r4
    191c:	5f 92       	push	r5
    191e:	6f 92       	push	r6
    1920:	7f 92       	push	r7
    1922:	8f 92       	push	r8
    1924:	9f 92       	push	r9
    1926:	af 92       	push	r10
    1928:	bf 92       	push	r11
    192a:	cf 92       	push	r12
    192c:	df 92       	push	r13
    192e:	ef 92       	push	r14
    1930:	ff 92       	push	r15
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	ca 1b       	sub	r28, r26
    1940:	db 0b       	sbc	r29, r27
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	09 94       	ijmp

0000194e <__epilogue_restores__>:
    194e:	2a 88       	ldd	r2, Y+18	; 0x12
    1950:	39 88       	ldd	r3, Y+17	; 0x11
    1952:	48 88       	ldd	r4, Y+16	; 0x10
    1954:	5f 84       	ldd	r5, Y+15	; 0x0f
    1956:	6e 84       	ldd	r6, Y+14	; 0x0e
    1958:	7d 84       	ldd	r7, Y+13	; 0x0d
    195a:	8c 84       	ldd	r8, Y+12	; 0x0c
    195c:	9b 84       	ldd	r9, Y+11	; 0x0b
    195e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1960:	b9 84       	ldd	r11, Y+9	; 0x09
    1962:	c8 84       	ldd	r12, Y+8	; 0x08
    1964:	df 80       	ldd	r13, Y+7	; 0x07
    1966:	ee 80       	ldd	r14, Y+6	; 0x06
    1968:	fd 80       	ldd	r15, Y+5	; 0x05
    196a:	0c 81       	ldd	r16, Y+4	; 0x04
    196c:	1b 81       	ldd	r17, Y+3	; 0x03
    196e:	aa 81       	ldd	r26, Y+2	; 0x02
    1970:	b9 81       	ldd	r27, Y+1	; 0x01
    1972:	ce 0f       	add	r28, r30
    1974:	d1 1d       	adc	r29, r1
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	ed 01       	movw	r28, r26
    1982:	08 95       	ret

00001984 <_exit>:
    1984:	f8 94       	cli

00001986 <__stop_program>:
    1986:	ff cf       	rjmp	.-2      	; 0x1986 <__stop_program>
